
rtc_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001980  08001980  00011980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800199c  0800199c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800199c  0800199c  0001199c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080019a4  080019a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019a4  080019a4  000119a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019a8  080019a8  000119a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080019ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080019b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080019b8  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003f68  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001212  00000000  00000000  00023fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005b8  00000000  00000000  000251f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000429  00000000  00000000  000257b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000125cd  00000000  00000000  00025bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006299  00000000  00000000  000381a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006fbb0  00000000  00000000  0003e43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001344  00000000  00000000  000adff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000af334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001968 	.word	0x08001968

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001968 	.word	0x08001968

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll CSR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <LL_RCC_EnableRTC+0x18>)
 80004ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80004b0:	4b03      	ldr	r3, [pc, #12]	; (80004c0 <LL_RCC_EnableRTC+0x18>)
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	02c9      	lsls	r1, r1, #11
 80004b6:	430a      	orrs	r2, r1
 80004b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40021000 	.word	0x40021000

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 f92e 	bl	8000728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f806 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f8a8 	bl	8000624 <MX_GPIO_Init>
  MX_RTC_Init();
 80004d4:	f000 f884 	bl	80005e0 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <main+0x14>
	...

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b09b      	sub	sp, #108	; 0x6c
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	2434      	movs	r4, #52	; 0x34
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	0018      	movs	r0, r3
 80004e8:	2334      	movs	r3, #52	; 0x34
 80004ea:	001a      	movs	r2, r3
 80004ec:	2100      	movs	r1, #0
 80004ee:	f001 fa0e 	bl	800190e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f2:	2320      	movs	r3, #32
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	0018      	movs	r0, r3
 80004f8:	2314      	movs	r3, #20
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f001 fa06 	bl	800190e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000502:	003b      	movs	r3, r7
 8000504:	0018      	movs	r0, r3
 8000506:	2320      	movs	r3, #32
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f001 f9ff 	bl	800190e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000510:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <SystemClock_Config+0xf8>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a30      	ldr	r2, [pc, #192]	; (80005d8 <SystemClock_Config+0xfc>)
 8000516:	401a      	ands	r2, r3
 8000518:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <SystemClock_Config+0xf8>)
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	0109      	lsls	r1, r1, #4
 800051e:	430a      	orrs	r2, r1
 8000520:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000522:	f000 fa25 	bl	8000970 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000526:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <SystemClock_Config+0x100>)
 8000528:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800052a:	4b2c      	ldr	r3, [pc, #176]	; (80005dc <SystemClock_Config+0x100>)
 800052c:	492a      	ldr	r1, [pc, #168]	; (80005d8 <SystemClock_Config+0xfc>)
 800052e:	400a      	ands	r2, r1
 8000530:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2206      	movs	r2, #6
 8000536:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	0052      	lsls	r2, r2, #1
 800053e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000540:	0021      	movs	r1, r4
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2201      	movs	r2, #1
 8000546:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2210      	movs	r2, #16
 800054c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2202      	movs	r2, #2
 8000552:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2280      	movs	r2, #128	; 0x80
 800055e:	02d2      	lsls	r2, r2, #11
 8000560:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	03d2      	lsls	r2, r2, #15
 8000568:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	187b      	adds	r3, r7, r1
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fa0d 	bl	800098c <HAL_RCC_OscConfig>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000576:	f000 f877 	bl	8000668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	2120      	movs	r1, #32
 800057c:	187b      	adds	r3, r7, r1
 800057e:	220f      	movs	r2, #15
 8000580:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2203      	movs	r2, #3
 8000586:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2101      	movs	r1, #1
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 fd70 	bl	8001084 <HAL_RCC_ClockConfig>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005a8:	f000 f85e 	bl	8000668 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005ac:	003b      	movs	r3, r7
 80005ae:	2220      	movs	r2, #32
 80005b0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80005b2:	003b      	movs	r3, r7
 80005b4:	2280      	movs	r2, #128	; 0x80
 80005b6:	0252      	lsls	r2, r2, #9
 80005b8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ba:	003b      	movs	r3, r7
 80005bc:	0018      	movs	r0, r3
 80005be:	f000 ff4f 	bl	8001460 <HAL_RCCEx_PeriphCLKConfig>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xee>
  {
    Error_Handler();
 80005c6:	f000 f84f 	bl	8000668 <Error_Handler>
  }
}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b01b      	add	sp, #108	; 0x6c
 80005d0:	bd90      	pop	{r4, r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40007000 	.word	0x40007000
 80005d8:	ffffe7ff 	.word	0xffffe7ff
 80005dc:	40021000 	.word	0x40021000

080005e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	0018      	movs	r0, r3
 80005ea:	230c      	movs	r3, #12
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f001 f98d 	bl	800190e <memset>

  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 80005f4:	f7ff ff58 	bl	80004a8 <LL_RCC_EnableRTC>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
  RTC_InitStruct.AsynchPrescaler = 127;
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	227f      	movs	r2, #127	; 0x7f
 8000602:	605a      	str	r2, [r3, #4]
  RTC_InitStruct.SynchPrescaler = 255;
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	22ff      	movs	r2, #255	; 0xff
 8000608:	609a      	str	r2, [r3, #8]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <MX_RTC_Init+0x40>)
 800060e:	0019      	movs	r1, r3
 8000610:	0010      	movs	r0, r2
 8000612:	f001 f8fd 	bl	8001810 <LL_RTC_Init>
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b004      	add	sp, #16
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	40002800 	.word	0x40002800

08000624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_GPIO_Init+0x40>)
 800062c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <MX_GPIO_Init+0x40>)
 8000630:	2104      	movs	r1, #4
 8000632:	430a      	orrs	r2, r1
 8000634:	62da      	str	r2, [r3, #44]	; 0x2c
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_GPIO_Init+0x40>)
 8000638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063a:	2204      	movs	r2, #4
 800063c:	4013      	ands	r3, r2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_GPIO_Init+0x40>)
 8000644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <MX_GPIO_Init+0x40>)
 8000648:	2101      	movs	r1, #1
 800064a:	430a      	orrs	r2, r1
 800064c:	62da      	str	r2, [r3, #44]	; 0x2c
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <MX_GPIO_Init+0x40>)
 8000650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000652:	2201      	movs	r2, #1
 8000654:	4013      	ands	r3, r2
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40021000 	.word	0x40021000

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
}
 800066e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	e7fe      	b.n	8000670 <Error_Handler+0x8>
	...

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <HAL_MspInit+0x24>)
 800067a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_MspInit+0x24>)
 800067e:	2101      	movs	r1, #1
 8000680:	430a      	orrs	r2, r1
 8000682:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <HAL_MspInit+0x24>)
 8000686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <HAL_MspInit+0x24>)
 800068a:	2180      	movs	r1, #128	; 0x80
 800068c:	0549      	lsls	r1, r1, #21
 800068e:	430a      	orrs	r2, r1
 8000690:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <NMI_Handler+0x4>

080006a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <HardFault_Handler+0x4>

080006a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c0:	f000 f886 	bl	80007d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80006d4:	480d      	ldr	r0, [pc, #52]	; (800070c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80006d6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006d8:	f7ff fff7 	bl	80006ca <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006dc:	480c      	ldr	r0, [pc, #48]	; (8000710 <LoopForever+0x6>)
  ldr r1, =_edata
 80006de:	490d      	ldr	r1, [pc, #52]	; (8000714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e0:	4a0d      	ldr	r2, [pc, #52]	; (8000718 <LoopForever+0xe>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e4:	e002      	b.n	80006ec <LoopCopyDataInit>

080006e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ea:	3304      	adds	r3, #4

080006ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f0:	d3f9      	bcc.n	80006e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006f2:	4a0a      	ldr	r2, [pc, #40]	; (800071c <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f4:	4c0a      	ldr	r4, [pc, #40]	; (8000720 <LoopForever+0x16>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f8:	e001      	b.n	80006fe <LoopFillZerobss>

080006fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006fc:	3204      	adds	r2, #4

080006fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000700:	d3fb      	bcc.n	80006fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000702:	f001 f90d 	bl	8001920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000706:	f7ff fedd 	bl	80004c4 <main>

0800070a <LoopForever>:

LoopForever:
    b LoopForever
 800070a:	e7fe      	b.n	800070a <LoopForever>
   ldr   r0, =_estack
 800070c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000714:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000718:	080019ac 	.word	0x080019ac
  ldr r2, =_sbss
 800071c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000720:	2000002c 	.word	0x2000002c

08000724 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000724:	e7fe      	b.n	8000724 <ADC1_COMP_IRQHandler>
	...

08000728 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <HAL_Init+0x3c>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <HAL_Init+0x3c>)
 800073a:	2140      	movs	r1, #64	; 0x40
 800073c:	430a      	orrs	r2, r1
 800073e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000740:	2003      	movs	r0, #3
 8000742:	f000 f811 	bl	8000768 <HAL_InitTick>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d003      	beq.n	8000752 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
 8000750:	e001      	b.n	8000756 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000752:	f7ff ff8f 	bl	8000674 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	781b      	ldrb	r3, [r3, #0]
}
 800075a:	0018      	movs	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	b002      	add	sp, #8
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	40022000 	.word	0x40022000

08000768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <HAL_InitTick+0x5c>)
 8000772:	681c      	ldr	r4, [r3, #0]
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <HAL_InitTick+0x60>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	0019      	movs	r1, r3
 800077a:	23fa      	movs	r3, #250	; 0xfa
 800077c:	0098      	lsls	r0, r3, #2
 800077e:	f7ff fcc3 	bl	8000108 <__udivsi3>
 8000782:	0003      	movs	r3, r0
 8000784:	0019      	movs	r1, r3
 8000786:	0020      	movs	r0, r4
 8000788:	f7ff fcbe 	bl	8000108 <__udivsi3>
 800078c:	0003      	movs	r3, r0
 800078e:	0018      	movs	r0, r3
 8000790:	f000 f8e1 	bl	8000956 <HAL_SYSTICK_Config>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000798:	2301      	movs	r3, #1
 800079a:	e00f      	b.n	80007bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d80b      	bhi.n	80007ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	2301      	movs	r3, #1
 80007a6:	425b      	negs	r3, r3
 80007a8:	2200      	movs	r2, #0
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 f8be 	bl	800092c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_InitTick+0x64>)
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e000      	b.n	80007bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
}
 80007bc:	0018      	movs	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	b003      	add	sp, #12
 80007c2:	bd90      	pop	{r4, r7, pc}
 80007c4:	20000000 	.word	0x20000000
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000004 	.word	0x20000004

080007d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x1c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	001a      	movs	r2, r3
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x20>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	18d2      	adds	r2, r2, r3
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <HAL_IncTick+0x20>)
 80007e2:	601a      	str	r2, [r3, #0]
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000028 	.word	0x20000028

080007f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  return uwTick;
 80007f8:	4b02      	ldr	r3, [pc, #8]	; (8000804 <HAL_GetTick+0x10>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	0018      	movs	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	20000028 	.word	0x20000028

08000808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	0002      	movs	r2, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b7f      	cmp	r3, #127	; 0x7f
 800081c:	d828      	bhi.n	8000870 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800081e:	4a2f      	ldr	r2, [pc, #188]	; (80008dc <__NVIC_SetPriority+0xd4>)
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b25b      	sxtb	r3, r3
 8000826:	089b      	lsrs	r3, r3, #2
 8000828:	33c0      	adds	r3, #192	; 0xc0
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	589b      	ldr	r3, [r3, r2]
 800082e:	1dfa      	adds	r2, r7, #7
 8000830:	7812      	ldrb	r2, [r2, #0]
 8000832:	0011      	movs	r1, r2
 8000834:	2203      	movs	r2, #3
 8000836:	400a      	ands	r2, r1
 8000838:	00d2      	lsls	r2, r2, #3
 800083a:	21ff      	movs	r1, #255	; 0xff
 800083c:	4091      	lsls	r1, r2
 800083e:	000a      	movs	r2, r1
 8000840:	43d2      	mvns	r2, r2
 8000842:	401a      	ands	r2, r3
 8000844:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	019b      	lsls	r3, r3, #6
 800084a:	22ff      	movs	r2, #255	; 0xff
 800084c:	401a      	ands	r2, r3
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	0018      	movs	r0, r3
 8000854:	2303      	movs	r3, #3
 8000856:	4003      	ands	r3, r0
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800085c:	481f      	ldr	r0, [pc, #124]	; (80008dc <__NVIC_SetPriority+0xd4>)
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b25b      	sxtb	r3, r3
 8000864:	089b      	lsrs	r3, r3, #2
 8000866:	430a      	orrs	r2, r1
 8000868:	33c0      	adds	r3, #192	; 0xc0
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800086e:	e031      	b.n	80008d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <__NVIC_SetPriority+0xd8>)
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	0019      	movs	r1, r3
 8000878:	230f      	movs	r3, #15
 800087a:	400b      	ands	r3, r1
 800087c:	3b08      	subs	r3, #8
 800087e:	089b      	lsrs	r3, r3, #2
 8000880:	3306      	adds	r3, #6
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	18d3      	adds	r3, r2, r3
 8000886:	3304      	adds	r3, #4
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	1dfa      	adds	r2, r7, #7
 800088c:	7812      	ldrb	r2, [r2, #0]
 800088e:	0011      	movs	r1, r2
 8000890:	2203      	movs	r2, #3
 8000892:	400a      	ands	r2, r1
 8000894:	00d2      	lsls	r2, r2, #3
 8000896:	21ff      	movs	r1, #255	; 0xff
 8000898:	4091      	lsls	r1, r2
 800089a:	000a      	movs	r2, r1
 800089c:	43d2      	mvns	r2, r2
 800089e:	401a      	ands	r2, r3
 80008a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	019b      	lsls	r3, r3, #6
 80008a6:	22ff      	movs	r2, #255	; 0xff
 80008a8:	401a      	ands	r2, r3
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	0018      	movs	r0, r3
 80008b0:	2303      	movs	r3, #3
 80008b2:	4003      	ands	r3, r0
 80008b4:	00db      	lsls	r3, r3, #3
 80008b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b8:	4809      	ldr	r0, [pc, #36]	; (80008e0 <__NVIC_SetPriority+0xd8>)
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	001c      	movs	r4, r3
 80008c0:	230f      	movs	r3, #15
 80008c2:	4023      	ands	r3, r4
 80008c4:	3b08      	subs	r3, #8
 80008c6:	089b      	lsrs	r3, r3, #2
 80008c8:	430a      	orrs	r2, r1
 80008ca:	3306      	adds	r3, #6
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	18c3      	adds	r3, r0, r3
 80008d0:	3304      	adds	r3, #4
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b003      	add	sp, #12
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	e000e100 	.word	0xe000e100
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	1e5a      	subs	r2, r3, #1
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	045b      	lsls	r3, r3, #17
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d301      	bcc.n	80008fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008f8:	2301      	movs	r3, #1
 80008fa:	e010      	b.n	800091e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <SysTick_Config+0x44>)
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	3a01      	subs	r2, #1
 8000902:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000904:	2301      	movs	r3, #1
 8000906:	425b      	negs	r3, r3
 8000908:	2103      	movs	r1, #3
 800090a:	0018      	movs	r0, r3
 800090c:	f7ff ff7c 	bl	8000808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <SysTick_Config+0x44>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <SysTick_Config+0x44>)
 8000918:	2207      	movs	r2, #7
 800091a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800091c:	2300      	movs	r3, #0
}
 800091e:	0018      	movs	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	b002      	add	sp, #8
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	e000e010 	.word	0xe000e010

0800092c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
 8000936:	210f      	movs	r1, #15
 8000938:	187b      	adds	r3, r7, r1
 800093a:	1c02      	adds	r2, r0, #0
 800093c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	187b      	adds	r3, r7, r1
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b25b      	sxtb	r3, r3
 8000946:	0011      	movs	r1, r2
 8000948:	0018      	movs	r0, r3
 800094a:	f7ff ff5d 	bl	8000808 <__NVIC_SetPriority>
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b004      	add	sp, #16
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	0018      	movs	r0, r3
 8000962:	f7ff ffbf 	bl	80008e4 <SysTick_Config>
 8000966:	0003      	movs	r3, r0
}
 8000968:	0018      	movs	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	b002      	add	sp, #8
 800096e:	bd80      	pop	{r7, pc}

08000970 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <HAL_PWR_EnableBkUpAccess+0x18>)
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	0049      	lsls	r1, r1, #1
 800097e:	430a      	orrs	r2, r1
 8000980:	601a      	str	r2, [r3, #0]
}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40007000 	.word	0x40007000

0800098c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800098c:	b5b0      	push	{r4, r5, r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d102      	bne.n	80009a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	f000 fb6c 	bl	8001078 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009a0:	4bc8      	ldr	r3, [pc, #800]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	220c      	movs	r2, #12
 80009a6:	4013      	ands	r3, r2
 80009a8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009aa:	4bc6      	ldr	r3, [pc, #792]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 80009ac:	68da      	ldr	r2, [r3, #12]
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	025b      	lsls	r3, r3, #9
 80009b2:	4013      	ands	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2201      	movs	r2, #1
 80009bc:	4013      	ands	r3, r2
 80009be:	d100      	bne.n	80009c2 <HAL_RCC_OscConfig+0x36>
 80009c0:	e07d      	b.n	8000abe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	2b08      	cmp	r3, #8
 80009c6:	d007      	beq.n	80009d8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	2b0c      	cmp	r3, #12
 80009cc:	d112      	bne.n	80009f4 <HAL_RCC_OscConfig+0x68>
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	025b      	lsls	r3, r3, #9
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d10d      	bne.n	80009f4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009d8:	4bba      	ldr	r3, [pc, #744]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	029b      	lsls	r3, r3, #10
 80009e0:	4013      	ands	r3, r2
 80009e2:	d100      	bne.n	80009e6 <HAL_RCC_OscConfig+0x5a>
 80009e4:	e06a      	b.n	8000abc <HAL_RCC_OscConfig+0x130>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d166      	bne.n	8000abc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	f000 fb42 	bl	8001078 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	2380      	movs	r3, #128	; 0x80
 80009fa:	025b      	lsls	r3, r3, #9
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d107      	bne.n	8000a10 <HAL_RCC_OscConfig+0x84>
 8000a00:	4bb0      	ldr	r3, [pc, #704]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4baf      	ldr	r3, [pc, #700]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	0249      	lsls	r1, r1, #9
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	e027      	b.n	8000a60 <HAL_RCC_OscConfig+0xd4>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	23a0      	movs	r3, #160	; 0xa0
 8000a16:	02db      	lsls	r3, r3, #11
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d10e      	bne.n	8000a3a <HAL_RCC_OscConfig+0xae>
 8000a1c:	4ba9      	ldr	r3, [pc, #676]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4ba8      	ldr	r3, [pc, #672]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000a22:	2180      	movs	r1, #128	; 0x80
 8000a24:	02c9      	lsls	r1, r1, #11
 8000a26:	430a      	orrs	r2, r1
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	4ba6      	ldr	r3, [pc, #664]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4ba5      	ldr	r3, [pc, #660]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	0249      	lsls	r1, r1, #9
 8000a34:	430a      	orrs	r2, r1
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	e012      	b.n	8000a60 <HAL_RCC_OscConfig+0xd4>
 8000a3a:	4ba2      	ldr	r3, [pc, #648]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	4ba1      	ldr	r3, [pc, #644]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000a40:	49a1      	ldr	r1, [pc, #644]	; (8000cc8 <HAL_RCC_OscConfig+0x33c>)
 8000a42:	400a      	ands	r2, r1
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	4b9f      	ldr	r3, [pc, #636]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	025b      	lsls	r3, r3, #9
 8000a4e:	4013      	ands	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	4b9b      	ldr	r3, [pc, #620]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b9a      	ldr	r3, [pc, #616]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000a5a:	499c      	ldr	r1, [pc, #624]	; (8000ccc <HAL_RCC_OscConfig+0x340>)
 8000a5c:	400a      	ands	r2, r1
 8000a5e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d014      	beq.n	8000a92 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a68:	f7ff fec4 	bl	80007f4 <HAL_GetTick>
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a70:	e008      	b.n	8000a84 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a72:	f7ff febf 	bl	80007f4 <HAL_GetTick>
 8000a76:	0002      	movs	r2, r0
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	2b64      	cmp	r3, #100	; 0x64
 8000a7e:	d901      	bls.n	8000a84 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000a80:	2303      	movs	r3, #3
 8000a82:	e2f9      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a84:	4b8f      	ldr	r3, [pc, #572]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	029b      	lsls	r3, r3, #10
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	d0f0      	beq.n	8000a72 <HAL_RCC_OscConfig+0xe6>
 8000a90:	e015      	b.n	8000abe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a92:	f7ff feaf 	bl	80007f4 <HAL_GetTick>
 8000a96:	0003      	movs	r3, r0
 8000a98:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000a9a:	e008      	b.n	8000aae <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a9c:	f7ff feaa 	bl	80007f4 <HAL_GetTick>
 8000aa0:	0002      	movs	r2, r0
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	2b64      	cmp	r3, #100	; 0x64
 8000aa8:	d901      	bls.n	8000aae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	e2e4      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000aae:	4b85      	ldr	r3, [pc, #532]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	029b      	lsls	r3, r3, #10
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	d1f0      	bne.n	8000a9c <HAL_RCC_OscConfig+0x110>
 8000aba:	e000      	b.n	8000abe <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000abc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	d100      	bne.n	8000aca <HAL_RCC_OscConfig+0x13e>
 8000ac8:	e099      	b.n	8000bfe <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	2220      	movs	r2, #32
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	d009      	beq.n	8000aec <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000ad8:	4b7a      	ldr	r3, [pc, #488]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b79      	ldr	r3, [pc, #484]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000ade:	2120      	movs	r1, #32
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	2220      	movs	r2, #32
 8000ae8:	4393      	bics	r3, r2
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	d005      	beq.n	8000afe <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	2b0c      	cmp	r3, #12
 8000af6:	d13e      	bne.n	8000b76 <HAL_RCC_OscConfig+0x1ea>
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d13b      	bne.n	8000b76 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000afe:	4b71      	ldr	r3, [pc, #452]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2204      	movs	r2, #4
 8000b04:	4013      	ands	r3, r2
 8000b06:	d004      	beq.n	8000b12 <HAL_RCC_OscConfig+0x186>
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e2b2      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b12:	4b6c      	ldr	r3, [pc, #432]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	4a6e      	ldr	r2, [pc, #440]	; (8000cd0 <HAL_RCC_OscConfig+0x344>)
 8000b18:	4013      	ands	r3, r2
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	691b      	ldr	r3, [r3, #16]
 8000b20:	021a      	lsls	r2, r3, #8
 8000b22:	4b68      	ldr	r3, [pc, #416]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000b24:	430a      	orrs	r2, r1
 8000b26:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b28:	4b66      	ldr	r3, [pc, #408]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2209      	movs	r2, #9
 8000b2e:	4393      	bics	r3, r2
 8000b30:	0019      	movs	r1, r3
 8000b32:	4b64      	ldr	r3, [pc, #400]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b36:	430a      	orrs	r2, r1
 8000b38:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b3a:	f000 fbeb 	bl	8001314 <HAL_RCC_GetSysClockFreq>
 8000b3e:	0001      	movs	r1, r0
 8000b40:	4b60      	ldr	r3, [pc, #384]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	091b      	lsrs	r3, r3, #4
 8000b46:	220f      	movs	r2, #15
 8000b48:	4013      	ands	r3, r2
 8000b4a:	4a62      	ldr	r2, [pc, #392]	; (8000cd4 <HAL_RCC_OscConfig+0x348>)
 8000b4c:	5cd3      	ldrb	r3, [r2, r3]
 8000b4e:	000a      	movs	r2, r1
 8000b50:	40da      	lsrs	r2, r3
 8000b52:	4b61      	ldr	r3, [pc, #388]	; (8000cd8 <HAL_RCC_OscConfig+0x34c>)
 8000b54:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000b56:	4b61      	ldr	r3, [pc, #388]	; (8000cdc <HAL_RCC_OscConfig+0x350>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2513      	movs	r5, #19
 8000b5c:	197c      	adds	r4, r7, r5
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff fe02 	bl	8000768 <HAL_InitTick>
 8000b64:	0003      	movs	r3, r0
 8000b66:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000b68:	197b      	adds	r3, r7, r5
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d046      	beq.n	8000bfe <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8000b70:	197b      	adds	r3, r7, r5
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	e280      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d027      	beq.n	8000bcc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b7c:	4b51      	ldr	r3, [pc, #324]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2209      	movs	r2, #9
 8000b82:	4393      	bics	r3, r2
 8000b84:	0019      	movs	r1, r3
 8000b86:	4b4f      	ldr	r3, [pc, #316]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b8e:	f7ff fe31 	bl	80007f4 <HAL_GetTick>
 8000b92:	0003      	movs	r3, r0
 8000b94:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b96:	e008      	b.n	8000baa <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b98:	f7ff fe2c 	bl	80007f4 <HAL_GetTick>
 8000b9c:	0002      	movs	r2, r0
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d901      	bls.n	8000baa <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e266      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000baa:	4b46      	ldr	r3, [pc, #280]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	d0f1      	beq.n	8000b98 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bb4:	4b43      	ldr	r3, [pc, #268]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	4a45      	ldr	r2, [pc, #276]	; (8000cd0 <HAL_RCC_OscConfig+0x344>)
 8000bba:	4013      	ands	r3, r2
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	691b      	ldr	r3, [r3, #16]
 8000bc2:	021a      	lsls	r2, r3, #8
 8000bc4:	4b3f      	ldr	r3, [pc, #252]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	e018      	b.n	8000bfe <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bcc:	4b3d      	ldr	r3, [pc, #244]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b3c      	ldr	r3, [pc, #240]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	438a      	bics	r2, r1
 8000bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd8:	f7ff fe0c 	bl	80007f4 <HAL_GetTick>
 8000bdc:	0003      	movs	r3, r0
 8000bde:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000be0:	e008      	b.n	8000bf4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000be2:	f7ff fe07 	bl	80007f4 <HAL_GetTick>
 8000be6:	0002      	movs	r2, r0
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d901      	bls.n	8000bf4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e241      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000bf4:	4b33      	ldr	r3, [pc, #204]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	d1f1      	bne.n	8000be2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2210      	movs	r2, #16
 8000c04:	4013      	ands	r3, r2
 8000c06:	d100      	bne.n	8000c0a <HAL_RCC_OscConfig+0x27e>
 8000c08:	e0a1      	b.n	8000d4e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d140      	bne.n	8000c92 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c10:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4013      	ands	r3, r2
 8000c1a:	d005      	beq.n	8000c28 <HAL_RCC_OscConfig+0x29c>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d101      	bne.n	8000c28 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e227      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c28:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	4a2c      	ldr	r2, [pc, #176]	; (8000ce0 <HAL_RCC_OscConfig+0x354>)
 8000c2e:	4013      	ands	r3, r2
 8000c30:	0019      	movs	r1, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a1a      	ldr	r2, [r3, #32]
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c3c:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	021b      	lsls	r3, r3, #8
 8000c42:	0a19      	lsrs	r1, r3, #8
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	061a      	lsls	r2, r3, #24
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a1b      	ldr	r3, [r3, #32]
 8000c54:	0b5b      	lsrs	r3, r3, #13
 8000c56:	3301      	adds	r3, #1
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	0212      	lsls	r2, r2, #8
 8000c5c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	091b      	lsrs	r3, r3, #4
 8000c64:	210f      	movs	r1, #15
 8000c66:	400b      	ands	r3, r1
 8000c68:	491a      	ldr	r1, [pc, #104]	; (8000cd4 <HAL_RCC_OscConfig+0x348>)
 8000c6a:	5ccb      	ldrb	r3, [r1, r3]
 8000c6c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <HAL_RCC_OscConfig+0x34c>)
 8000c70:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_RCC_OscConfig+0x350>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2513      	movs	r5, #19
 8000c78:	197c      	adds	r4, r7, r5
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f7ff fd74 	bl	8000768 <HAL_InitTick>
 8000c80:	0003      	movs	r3, r0
 8000c82:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000c84:	197b      	adds	r3, r7, r5
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d060      	beq.n	8000d4e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8000c8c:	197b      	adds	r3, r7, r5
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	e1f2      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d03f      	beq.n	8000d1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_RCC_OscConfig+0x338>)
 8000ca0:	2180      	movs	r1, #128	; 0x80
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca8:	f7ff fda4 	bl	80007f4 <HAL_GetTick>
 8000cac:	0003      	movs	r3, r0
 8000cae:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000cb0:	e018      	b.n	8000ce4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000cb2:	f7ff fd9f 	bl	80007f4 <HAL_GetTick>
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d911      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e1d9      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	fffeffff 	.word	0xfffeffff
 8000ccc:	fffbffff 	.word	0xfffbffff
 8000cd0:	ffffe0ff 	.word	0xffffe0ff
 8000cd4:	08001980 	.word	0x08001980
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000004 	.word	0x20000004
 8000ce0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000ce4:	4bc9      	ldr	r3, [pc, #804]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4013      	ands	r3, r2
 8000cee:	d0e0      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cf0:	4bc6      	ldr	r3, [pc, #792]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	4ac6      	ldr	r2, [pc, #792]	; (8001010 <HAL_RCC_OscConfig+0x684>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a1a      	ldr	r2, [r3, #32]
 8000cfe:	4bc3      	ldr	r3, [pc, #780]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000d00:	430a      	orrs	r2, r1
 8000d02:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d04:	4bc1      	ldr	r3, [pc, #772]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	021b      	lsls	r3, r3, #8
 8000d0a:	0a19      	lsrs	r1, r3, #8
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69db      	ldr	r3, [r3, #28]
 8000d10:	061a      	lsls	r2, r3, #24
 8000d12:	4bbe      	ldr	r3, [pc, #760]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000d14:	430a      	orrs	r2, r1
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	e019      	b.n	8000d4e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d1a:	4bbc      	ldr	r3, [pc, #752]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4bbb      	ldr	r3, [pc, #748]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000d20:	49bc      	ldr	r1, [pc, #752]	; (8001014 <HAL_RCC_OscConfig+0x688>)
 8000d22:	400a      	ands	r2, r1
 8000d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d26:	f7ff fd65 	bl	80007f4 <HAL_GetTick>
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000d2e:	e008      	b.n	8000d42 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d30:	f7ff fd60 	bl	80007f4 <HAL_GetTick>
 8000d34:	0002      	movs	r2, r0
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d901      	bls.n	8000d42 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e19a      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000d42:	4bb2      	ldr	r3, [pc, #712]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	d1f0      	bne.n	8000d30 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2208      	movs	r2, #8
 8000d54:	4013      	ands	r3, r2
 8000d56:	d036      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d019      	beq.n	8000d94 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d60:	4baa      	ldr	r3, [pc, #680]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000d62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d64:	4ba9      	ldr	r3, [pc, #676]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000d66:	2101      	movs	r1, #1
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d6c:	f7ff fd42 	bl	80007f4 <HAL_GetTick>
 8000d70:	0003      	movs	r3, r0
 8000d72:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000d74:	e008      	b.n	8000d88 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d76:	f7ff fd3d 	bl	80007f4 <HAL_GetTick>
 8000d7a:	0002      	movs	r2, r0
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d901      	bls.n	8000d88 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e177      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000d88:	4ba0      	ldr	r3, [pc, #640]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	4013      	ands	r3, r2
 8000d90:	d0f1      	beq.n	8000d76 <HAL_RCC_OscConfig+0x3ea>
 8000d92:	e018      	b.n	8000dc6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d94:	4b9d      	ldr	r3, [pc, #628]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000d96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d98:	4b9c      	ldr	r3, [pc, #624]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	438a      	bics	r2, r1
 8000d9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da0:	f7ff fd28 	bl	80007f4 <HAL_GetTick>
 8000da4:	0003      	movs	r3, r0
 8000da6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000da8:	e008      	b.n	8000dbc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000daa:	f7ff fd23 	bl	80007f4 <HAL_GetTick>
 8000dae:	0002      	movs	r2, r0
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d901      	bls.n	8000dbc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e15d      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000dbc:	4b93      	ldr	r3, [pc, #588]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	d1f1      	bne.n	8000daa <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2204      	movs	r2, #4
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d100      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x446>
 8000dd0:	e0ae      	b.n	8000f30 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dd2:	2023      	movs	r0, #35	; 0x23
 8000dd4:	183b      	adds	r3, r7, r0
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dda:	4b8c      	ldr	r3, [pc, #560]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	055b      	lsls	r3, r3, #21
 8000de2:	4013      	ands	r3, r2
 8000de4:	d109      	bne.n	8000dfa <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b89      	ldr	r3, [pc, #548]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dea:	4b88      	ldr	r3, [pc, #544]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	0549      	lsls	r1, r1, #21
 8000df0:	430a      	orrs	r2, r1
 8000df2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8000df4:	183b      	adds	r3, r7, r0
 8000df6:	2201      	movs	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dfa:	4b87      	ldr	r3, [pc, #540]	; (8001018 <HAL_RCC_OscConfig+0x68c>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4013      	ands	r3, r2
 8000e04:	d11a      	bne.n	8000e3c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e06:	4b84      	ldr	r3, [pc, #528]	; (8001018 <HAL_RCC_OscConfig+0x68c>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	4b83      	ldr	r3, [pc, #524]	; (8001018 <HAL_RCC_OscConfig+0x68c>)
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	0049      	lsls	r1, r1, #1
 8000e10:	430a      	orrs	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e14:	f7ff fcee 	bl	80007f4 <HAL_GetTick>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e1c:	e008      	b.n	8000e30 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e1e:	f7ff fce9 	bl	80007f4 <HAL_GetTick>
 8000e22:	0002      	movs	r2, r0
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b64      	cmp	r3, #100	; 0x64
 8000e2a:	d901      	bls.n	8000e30 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e123      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e30:	4b79      	ldr	r3, [pc, #484]	; (8001018 <HAL_RCC_OscConfig+0x68c>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d0f0      	beq.n	8000e1e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d107      	bne.n	8000e58 <HAL_RCC_OscConfig+0x4cc>
 8000e48:	4b70      	ldr	r3, [pc, #448]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000e4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e4c:	4b6f      	ldr	r3, [pc, #444]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	0049      	lsls	r1, r1, #1
 8000e52:	430a      	orrs	r2, r1
 8000e54:	651a      	str	r2, [r3, #80]	; 0x50
 8000e56:	e031      	b.n	8000ebc <HAL_RCC_OscConfig+0x530>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10c      	bne.n	8000e7a <HAL_RCC_OscConfig+0x4ee>
 8000e60:	4b6a      	ldr	r3, [pc, #424]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000e62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e64:	4b69      	ldr	r3, [pc, #420]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000e66:	496b      	ldr	r1, [pc, #428]	; (8001014 <HAL_RCC_OscConfig+0x688>)
 8000e68:	400a      	ands	r2, r1
 8000e6a:	651a      	str	r2, [r3, #80]	; 0x50
 8000e6c:	4b67      	ldr	r3, [pc, #412]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000e6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e70:	4b66      	ldr	r3, [pc, #408]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000e72:	496a      	ldr	r1, [pc, #424]	; (800101c <HAL_RCC_OscConfig+0x690>)
 8000e74:	400a      	ands	r2, r1
 8000e76:	651a      	str	r2, [r3, #80]	; 0x50
 8000e78:	e020      	b.n	8000ebc <HAL_RCC_OscConfig+0x530>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	23a0      	movs	r3, #160	; 0xa0
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d10e      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x518>
 8000e86:	4b61      	ldr	r3, [pc, #388]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000e88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e8a:	4b60      	ldr	r3, [pc, #384]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	00c9      	lsls	r1, r1, #3
 8000e90:	430a      	orrs	r2, r1
 8000e92:	651a      	str	r2, [r3, #80]	; 0x50
 8000e94:	4b5d      	ldr	r3, [pc, #372]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000e96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e98:	4b5c      	ldr	r3, [pc, #368]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	0049      	lsls	r1, r1, #1
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	651a      	str	r2, [r3, #80]	; 0x50
 8000ea2:	e00b      	b.n	8000ebc <HAL_RCC_OscConfig+0x530>
 8000ea4:	4b59      	ldr	r3, [pc, #356]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000ea6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ea8:	4b58      	ldr	r3, [pc, #352]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000eaa:	495a      	ldr	r1, [pc, #360]	; (8001014 <HAL_RCC_OscConfig+0x688>)
 8000eac:	400a      	ands	r2, r1
 8000eae:	651a      	str	r2, [r3, #80]	; 0x50
 8000eb0:	4b56      	ldr	r3, [pc, #344]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000eb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eb4:	4b55      	ldr	r3, [pc, #340]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000eb6:	4959      	ldr	r1, [pc, #356]	; (800101c <HAL_RCC_OscConfig+0x690>)
 8000eb8:	400a      	ands	r2, r1
 8000eba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d015      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec4:	f7ff fc96 	bl	80007f4 <HAL_GetTick>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ecc:	e009      	b.n	8000ee2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ece:	f7ff fc91 	bl	80007f4 <HAL_GetTick>
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	4a51      	ldr	r2, [pc, #324]	; (8001020 <HAL_RCC_OscConfig+0x694>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e0ca      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ee2:	4b4a      	ldr	r3, [pc, #296]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000ee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4013      	ands	r3, r2
 8000eec:	d0ef      	beq.n	8000ece <HAL_RCC_OscConfig+0x542>
 8000eee:	e014      	b.n	8000f1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef0:	f7ff fc80 	bl	80007f4 <HAL_GetTick>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000ef8:	e009      	b.n	8000f0e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000efa:	f7ff fc7b 	bl	80007f4 <HAL_GetTick>
 8000efe:	0002      	movs	r2, r0
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	4a46      	ldr	r2, [pc, #280]	; (8001020 <HAL_RCC_OscConfig+0x694>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e0b4      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000f0e:	4b3f      	ldr	r3, [pc, #252]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000f10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4013      	ands	r3, r2
 8000f18:	d1ef      	bne.n	8000efa <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000f1a:	2323      	movs	r3, #35	; 0x23
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d105      	bne.n	8000f30 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f24:	4b39      	ldr	r3, [pc, #228]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f28:	4b38      	ldr	r3, [pc, #224]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000f2a:	493e      	ldr	r1, [pc, #248]	; (8001024 <HAL_RCC_OscConfig+0x698>)
 8000f2c:	400a      	ands	r2, r1
 8000f2e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d100      	bne.n	8000f3a <HAL_RCC_OscConfig+0x5ae>
 8000f38:	e09d      	b.n	8001076 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	2b0c      	cmp	r3, #12
 8000f3e:	d100      	bne.n	8000f42 <HAL_RCC_OscConfig+0x5b6>
 8000f40:	e076      	b.n	8001030 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d145      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f4a:	4b30      	ldr	r3, [pc, #192]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4b2f      	ldr	r3, [pc, #188]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000f50:	4935      	ldr	r1, [pc, #212]	; (8001028 <HAL_RCC_OscConfig+0x69c>)
 8000f52:	400a      	ands	r2, r1
 8000f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fc4d 	bl	80007f4 <HAL_GetTick>
 8000f5a:	0003      	movs	r3, r0
 8000f5c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f60:	f7ff fc48 	bl	80007f4 <HAL_GetTick>
 8000f64:	0002      	movs	r2, r0
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e082      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000f72:	4b26      	ldr	r3, [pc, #152]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	049b      	lsls	r3, r3, #18
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	4a2a      	ldr	r2, [pc, #168]	; (800102c <HAL_RCC_OscConfig+0x6a0>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	0019      	movs	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	431a      	orrs	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	431a      	orrs	r2, r3
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	0449      	lsls	r1, r1, #17
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff fc22 	bl	80007f4 <HAL_GetTick>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb6:	f7ff fc1d 	bl	80007f4 <HAL_GetTick>
 8000fba:	0002      	movs	r2, r0
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e057      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	049b      	lsls	r3, r3, #18
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d0f0      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x62a>
 8000fd4:	e04f      	b.n	8001076 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8000fdc:	4912      	ldr	r1, [pc, #72]	; (8001028 <HAL_RCC_OscConfig+0x69c>)
 8000fde:	400a      	ands	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe2:	f7ff fc07 	bl	80007f4 <HAL_GetTick>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fec:	f7ff fc02 	bl	80007f4 <HAL_GetTick>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e03c      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000ffe:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_RCC_OscConfig+0x680>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	049b      	lsls	r3, r3, #18
 8001006:	4013      	ands	r3, r2
 8001008:	d1f0      	bne.n	8000fec <HAL_RCC_OscConfig+0x660>
 800100a:	e034      	b.n	8001076 <HAL_RCC_OscConfig+0x6ea>
 800100c:	40021000 	.word	0x40021000
 8001010:	ffff1fff 	.word	0xffff1fff
 8001014:	fffffeff 	.word	0xfffffeff
 8001018:	40007000 	.word	0x40007000
 800101c:	fffffbff 	.word	0xfffffbff
 8001020:	00001388 	.word	0x00001388
 8001024:	efffffff 	.word	0xefffffff
 8001028:	feffffff 	.word	0xfeffffff
 800102c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	2b01      	cmp	r3, #1
 8001036:	d101      	bne.n	800103c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e01d      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_RCC_OscConfig+0x6f4>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	025b      	lsls	r3, r3, #9
 8001048:	401a      	ands	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104e:	429a      	cmp	r2, r3
 8001050:	d10f      	bne.n	8001072 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	23f0      	movs	r3, #240	; 0xf0
 8001056:	039b      	lsls	r3, r3, #14
 8001058:	401a      	ands	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800105e:	429a      	cmp	r2, r3
 8001060:	d107      	bne.n	8001072 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	23c0      	movs	r3, #192	; 0xc0
 8001066:	041b      	lsls	r3, r3, #16
 8001068:	401a      	ands	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800106e:	429a      	cmp	r2, r3
 8001070:	d001      	beq.n	8001076 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	b00a      	add	sp, #40	; 0x28
 800107e:	bdb0      	pop	{r4, r5, r7, pc}
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001084:	b5b0      	push	{r4, r5, r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d101      	bne.n	8001098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e128      	b.n	80012ea <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001098:	4b96      	ldr	r3, [pc, #600]	; (80012f4 <HAL_RCC_ClockConfig+0x270>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2201      	movs	r2, #1
 800109e:	4013      	ands	r3, r2
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d91e      	bls.n	80010e4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a6:	4b93      	ldr	r3, [pc, #588]	; (80012f4 <HAL_RCC_ClockConfig+0x270>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2201      	movs	r2, #1
 80010ac:	4393      	bics	r3, r2
 80010ae:	0019      	movs	r1, r3
 80010b0:	4b90      	ldr	r3, [pc, #576]	; (80012f4 <HAL_RCC_ClockConfig+0x270>)
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80010b8:	f7ff fb9c 	bl	80007f4 <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010c0:	e009      	b.n	80010d6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c2:	f7ff fb97 	bl	80007f4 <HAL_GetTick>
 80010c6:	0002      	movs	r2, r0
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	4a8a      	ldr	r2, [pc, #552]	; (80012f8 <HAL_RCC_ClockConfig+0x274>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e109      	b.n	80012ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d6:	4b87      	ldr	r3, [pc, #540]	; (80012f4 <HAL_RCC_ClockConfig+0x270>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2201      	movs	r2, #1
 80010dc:	4013      	ands	r3, r2
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d1ee      	bne.n	80010c2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2202      	movs	r2, #2
 80010ea:	4013      	ands	r3, r2
 80010ec:	d009      	beq.n	8001102 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ee:	4b83      	ldr	r3, [pc, #524]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	22f0      	movs	r2, #240	; 0xf0
 80010f4:	4393      	bics	r3, r2
 80010f6:	0019      	movs	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	4b7f      	ldr	r3, [pc, #508]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 80010fe:	430a      	orrs	r2, r1
 8001100:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2201      	movs	r2, #1
 8001108:	4013      	ands	r3, r2
 800110a:	d100      	bne.n	800110e <HAL_RCC_ClockConfig+0x8a>
 800110c:	e089      	b.n	8001222 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d107      	bne.n	8001126 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001116:	4b79      	ldr	r3, [pc, #484]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	029b      	lsls	r3, r3, #10
 800111e:	4013      	ands	r3, r2
 8001120:	d120      	bne.n	8001164 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e0e1      	b.n	80012ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b03      	cmp	r3, #3
 800112c:	d107      	bne.n	800113e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800112e:	4b73      	ldr	r3, [pc, #460]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	049b      	lsls	r3, r3, #18
 8001136:	4013      	ands	r3, r2
 8001138:	d114      	bne.n	8001164 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e0d5      	b.n	80012ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d106      	bne.n	8001154 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001146:	4b6d      	ldr	r3, [pc, #436]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2204      	movs	r2, #4
 800114c:	4013      	ands	r3, r2
 800114e:	d109      	bne.n	8001164 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e0ca      	b.n	80012ea <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001154:	4b69      	ldr	r3, [pc, #420]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4013      	ands	r3, r2
 800115e:	d101      	bne.n	8001164 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e0c2      	b.n	80012ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001164:	4b65      	ldr	r3, [pc, #404]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	2203      	movs	r2, #3
 800116a:	4393      	bics	r3, r2
 800116c:	0019      	movs	r1, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	4b62      	ldr	r3, [pc, #392]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 8001174:	430a      	orrs	r2, r1
 8001176:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001178:	f7ff fb3c 	bl	80007f4 <HAL_GetTick>
 800117c:	0003      	movs	r3, r0
 800117e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d111      	bne.n	80011ac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001188:	e009      	b.n	800119e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800118a:	f7ff fb33 	bl	80007f4 <HAL_GetTick>
 800118e:	0002      	movs	r2, r0
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	4a58      	ldr	r2, [pc, #352]	; (80012f8 <HAL_RCC_ClockConfig+0x274>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d901      	bls.n	800119e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e0a5      	b.n	80012ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800119e:	4b57      	ldr	r3, [pc, #348]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	220c      	movs	r2, #12
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d1ef      	bne.n	800118a <HAL_RCC_ClockConfig+0x106>
 80011aa:	e03a      	b.n	8001222 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d111      	bne.n	80011d8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011b4:	e009      	b.n	80011ca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b6:	f7ff fb1d 	bl	80007f4 <HAL_GetTick>
 80011ba:	0002      	movs	r2, r0
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	4a4d      	ldr	r2, [pc, #308]	; (80012f8 <HAL_RCC_ClockConfig+0x274>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e08f      	b.n	80012ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011ca:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	220c      	movs	r2, #12
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b0c      	cmp	r3, #12
 80011d4:	d1ef      	bne.n	80011b6 <HAL_RCC_ClockConfig+0x132>
 80011d6:	e024      	b.n	8001222 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d11b      	bne.n	8001218 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011e0:	e009      	b.n	80011f6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e2:	f7ff fb07 	bl	80007f4 <HAL_GetTick>
 80011e6:	0002      	movs	r2, r0
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	4a42      	ldr	r2, [pc, #264]	; (80012f8 <HAL_RCC_ClockConfig+0x274>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e079      	b.n	80012ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	220c      	movs	r2, #12
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d1ef      	bne.n	80011e2 <HAL_RCC_ClockConfig+0x15e>
 8001202:	e00e      	b.n	8001222 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001204:	f7ff faf6 	bl	80007f4 <HAL_GetTick>
 8001208:	0002      	movs	r2, r0
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	4a3a      	ldr	r2, [pc, #232]	; (80012f8 <HAL_RCC_ClockConfig+0x274>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e068      	b.n	80012ea <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001218:	4b38      	ldr	r3, [pc, #224]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	220c      	movs	r2, #12
 800121e:	4013      	ands	r3, r2
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001222:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <HAL_RCC_ClockConfig+0x270>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2201      	movs	r2, #1
 8001228:	4013      	ands	r3, r2
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d21e      	bcs.n	800126e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <HAL_RCC_ClockConfig+0x270>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2201      	movs	r2, #1
 8001236:	4393      	bics	r3, r2
 8001238:	0019      	movs	r1, r3
 800123a:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <HAL_RCC_ClockConfig+0x270>)
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001242:	f7ff fad7 	bl	80007f4 <HAL_GetTick>
 8001246:	0003      	movs	r3, r0
 8001248:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124a:	e009      	b.n	8001260 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800124c:	f7ff fad2 	bl	80007f4 <HAL_GetTick>
 8001250:	0002      	movs	r2, r0
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	4a28      	ldr	r2, [pc, #160]	; (80012f8 <HAL_RCC_ClockConfig+0x274>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e044      	b.n	80012ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <HAL_RCC_ClockConfig+0x270>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2201      	movs	r2, #1
 8001266:	4013      	ands	r3, r2
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	d1ee      	bne.n	800124c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2204      	movs	r2, #4
 8001274:	4013      	ands	r3, r2
 8001276:	d009      	beq.n	800128c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	4a20      	ldr	r2, [pc, #128]	; (8001300 <HAL_RCC_ClockConfig+0x27c>)
 800127e:	4013      	ands	r3, r2
 8001280:	0019      	movs	r1, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 8001288:	430a      	orrs	r2, r1
 800128a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2208      	movs	r2, #8
 8001292:	4013      	ands	r3, r2
 8001294:	d00a      	beq.n	80012ac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	4a1a      	ldr	r2, [pc, #104]	; (8001304 <HAL_RCC_ClockConfig+0x280>)
 800129c:	4013      	ands	r3, r2
 800129e:	0019      	movs	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	00da      	lsls	r2, r3, #3
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 80012a8:	430a      	orrs	r2, r1
 80012aa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012ac:	f000 f832 	bl	8001314 <HAL_RCC_GetSysClockFreq>
 80012b0:	0001      	movs	r1, r0
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_RCC_ClockConfig+0x278>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	220f      	movs	r2, #15
 80012ba:	4013      	ands	r3, r2
 80012bc:	4a12      	ldr	r2, [pc, #72]	; (8001308 <HAL_RCC_ClockConfig+0x284>)
 80012be:	5cd3      	ldrb	r3, [r2, r3]
 80012c0:	000a      	movs	r2, r1
 80012c2:	40da      	lsrs	r2, r3
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_RCC_ClockConfig+0x288>)
 80012c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_RCC_ClockConfig+0x28c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	250b      	movs	r5, #11
 80012ce:	197c      	adds	r4, r7, r5
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff fa49 	bl	8000768 <HAL_InitTick>
 80012d6:	0003      	movs	r3, r0
 80012d8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80012da:	197b      	adds	r3, r7, r5
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80012e2:	197b      	adds	r3, r7, r5
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	e000      	b.n	80012ea <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	0018      	movs	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b004      	add	sp, #16
 80012f0:	bdb0      	pop	{r4, r5, r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	40022000 	.word	0x40022000
 80012f8:	00001388 	.word	0x00001388
 80012fc:	40021000 	.word	0x40021000
 8001300:	fffff8ff 	.word	0xfffff8ff
 8001304:	ffffc7ff 	.word	0xffffc7ff
 8001308:	08001980 	.word	0x08001980
 800130c:	20000000 	.word	0x20000000
 8001310:	20000004 	.word	0x20000004

08001314 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001314:	b5b0      	push	{r4, r5, r7, lr}
 8001316:	b08e      	sub	sp, #56	; 0x38
 8001318:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800131a:	4b4c      	ldr	r3, [pc, #304]	; (800144c <HAL_RCC_GetSysClockFreq+0x138>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001322:	230c      	movs	r3, #12
 8001324:	4013      	ands	r3, r2
 8001326:	2b0c      	cmp	r3, #12
 8001328:	d014      	beq.n	8001354 <HAL_RCC_GetSysClockFreq+0x40>
 800132a:	d900      	bls.n	800132e <HAL_RCC_GetSysClockFreq+0x1a>
 800132c:	e07b      	b.n	8001426 <HAL_RCC_GetSysClockFreq+0x112>
 800132e:	2b04      	cmp	r3, #4
 8001330:	d002      	beq.n	8001338 <HAL_RCC_GetSysClockFreq+0x24>
 8001332:	2b08      	cmp	r3, #8
 8001334:	d00b      	beq.n	800134e <HAL_RCC_GetSysClockFreq+0x3a>
 8001336:	e076      	b.n	8001426 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001338:	4b44      	ldr	r3, [pc, #272]	; (800144c <HAL_RCC_GetSysClockFreq+0x138>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2210      	movs	r2, #16
 800133e:	4013      	ands	r3, r2
 8001340:	d002      	beq.n	8001348 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001342:	4b43      	ldr	r3, [pc, #268]	; (8001450 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001346:	e07c      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001348:	4b42      	ldr	r3, [pc, #264]	; (8001454 <HAL_RCC_GetSysClockFreq+0x140>)
 800134a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800134c:	e079      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800134e:	4b42      	ldr	r3, [pc, #264]	; (8001458 <HAL_RCC_GetSysClockFreq+0x144>)
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001352:	e076      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001356:	0c9a      	lsrs	r2, r3, #18
 8001358:	230f      	movs	r3, #15
 800135a:	401a      	ands	r2, r3
 800135c:	4b3f      	ldr	r3, [pc, #252]	; (800145c <HAL_RCC_GetSysClockFreq+0x148>)
 800135e:	5c9b      	ldrb	r3, [r3, r2]
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001364:	0d9a      	lsrs	r2, r3, #22
 8001366:	2303      	movs	r3, #3
 8001368:	4013      	ands	r3, r2
 800136a:	3301      	adds	r3, #1
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800136e:	4b37      	ldr	r3, [pc, #220]	; (800144c <HAL_RCC_GetSysClockFreq+0x138>)
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	025b      	lsls	r3, r3, #9
 8001376:	4013      	ands	r3, r2
 8001378:	d01a      	beq.n	80013b0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	4a35      	ldr	r2, [pc, #212]	; (8001458 <HAL_RCC_GetSysClockFreq+0x144>)
 8001384:	2300      	movs	r3, #0
 8001386:	69b8      	ldr	r0, [r7, #24]
 8001388:	69f9      	ldr	r1, [r7, #28]
 800138a:	f7fe ff69 	bl	8000260 <__aeabi_lmul>
 800138e:	0002      	movs	r2, r0
 8001390:	000b      	movs	r3, r1
 8001392:	0010      	movs	r0, r2
 8001394:	0019      	movs	r1, r3
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f7fe ff3d 	bl	8000220 <__aeabi_uldivmod>
 80013a6:	0002      	movs	r2, r0
 80013a8:	000b      	movs	r3, r1
 80013aa:	0013      	movs	r3, r2
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
 80013ae:	e037      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_RCC_GetSysClockFreq+0x138>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2210      	movs	r2, #16
 80013b6:	4013      	ands	r3, r2
 80013b8:	d01a      	beq.n	80013f0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80013ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <HAL_RCC_GetSysClockFreq+0x13c>)
 80013c4:	2300      	movs	r3, #0
 80013c6:	68b8      	ldr	r0, [r7, #8]
 80013c8:	68f9      	ldr	r1, [r7, #12]
 80013ca:	f7fe ff49 	bl	8000260 <__aeabi_lmul>
 80013ce:	0002      	movs	r2, r0
 80013d0:	000b      	movs	r3, r1
 80013d2:	0010      	movs	r0, r2
 80013d4:	0019      	movs	r1, r3
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f7fe ff1d 	bl	8000220 <__aeabi_uldivmod>
 80013e6:	0002      	movs	r2, r0
 80013e8:	000b      	movs	r3, r1
 80013ea:	0013      	movs	r3, r2
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
 80013ee:	e017      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80013f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f2:	0018      	movs	r0, r3
 80013f4:	2300      	movs	r3, #0
 80013f6:	0019      	movs	r1, r3
 80013f8:	4a16      	ldr	r2, [pc, #88]	; (8001454 <HAL_RCC_GetSysClockFreq+0x140>)
 80013fa:	2300      	movs	r3, #0
 80013fc:	f7fe ff30 	bl	8000260 <__aeabi_lmul>
 8001400:	0002      	movs	r2, r0
 8001402:	000b      	movs	r3, r1
 8001404:	0010      	movs	r0, r2
 8001406:	0019      	movs	r1, r3
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	001c      	movs	r4, r3
 800140c:	2300      	movs	r3, #0
 800140e:	001d      	movs	r5, r3
 8001410:	0022      	movs	r2, r4
 8001412:	002b      	movs	r3, r5
 8001414:	f7fe ff04 	bl	8000220 <__aeabi_uldivmod>
 8001418:	0002      	movs	r2, r0
 800141a:	000b      	movs	r3, r1
 800141c:	0013      	movs	r3, r2
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001422:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001424:	e00d      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_RCC_GetSysClockFreq+0x138>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	0b5b      	lsrs	r3, r3, #13
 800142c:	2207      	movs	r2, #7
 800142e:	4013      	ands	r3, r2
 8001430:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	3301      	adds	r3, #1
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	0212      	lsls	r2, r2, #8
 800143a:	409a      	lsls	r2, r3
 800143c:	0013      	movs	r3, r2
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001440:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	b00e      	add	sp, #56	; 0x38
 800144a:	bdb0      	pop	{r4, r5, r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	003d0900 	.word	0x003d0900
 8001454:	00f42400 	.word	0x00f42400
 8001458:	007a1200 	.word	0x007a1200
 800145c:	08001990 	.word	0x08001990

08001460 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001468:	2017      	movs	r0, #23
 800146a:	183b      	adds	r3, r7, r0
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2220      	movs	r2, #32
 8001476:	4013      	ands	r3, r2
 8001478:	d100      	bne.n	800147c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800147a:	e0c7      	b.n	800160c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147c:	4b93      	ldr	r3, [pc, #588]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800147e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	055b      	lsls	r3, r3, #21
 8001484:	4013      	ands	r3, r2
 8001486:	d109      	bne.n	800149c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	4b90      	ldr	r3, [pc, #576]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800148a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800148c:	4b8f      	ldr	r3, [pc, #572]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800148e:	2180      	movs	r1, #128	; 0x80
 8001490:	0549      	lsls	r1, r1, #21
 8001492:	430a      	orrs	r2, r1
 8001494:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001496:	183b      	adds	r3, r7, r0
 8001498:	2201      	movs	r2, #1
 800149a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149c:	4b8c      	ldr	r3, [pc, #560]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4013      	ands	r3, r2
 80014a6:	d11a      	bne.n	80014de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014a8:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b88      	ldr	r3, [pc, #544]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	0049      	lsls	r1, r1, #1
 80014b2:	430a      	orrs	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b6:	f7ff f99d 	bl	80007f4 <HAL_GetTick>
 80014ba:	0003      	movs	r3, r0
 80014bc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014be:	e008      	b.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c0:	f7ff f998 	bl	80007f4 <HAL_GetTick>
 80014c4:	0002      	movs	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e0f8      	b.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d2:	4b7f      	ldr	r3, [pc, #508]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4013      	ands	r3, r2
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80014de:	4b7b      	ldr	r3, [pc, #492]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	23c0      	movs	r3, #192	; 0xc0
 80014e4:	039b      	lsls	r3, r3, #14
 80014e6:	4013      	ands	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	23c0      	movs	r3, #192	; 0xc0
 80014f0:	039b      	lsls	r3, r3, #14
 80014f2:	4013      	ands	r3, r2
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d013      	beq.n	8001522 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	23c0      	movs	r3, #192	; 0xc0
 8001500:	029b      	lsls	r3, r3, #10
 8001502:	401a      	ands	r2, r3
 8001504:	23c0      	movs	r3, #192	; 0xc0
 8001506:	029b      	lsls	r3, r3, #10
 8001508:	429a      	cmp	r2, r3
 800150a:	d10a      	bne.n	8001522 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800150c:	4b6f      	ldr	r3, [pc, #444]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	029b      	lsls	r3, r3, #10
 8001514:	401a      	ands	r2, r3
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	029b      	lsls	r3, r3, #10
 800151a:	429a      	cmp	r2, r3
 800151c:	d101      	bne.n	8001522 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e0d0      	b.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001522:	4b6a      	ldr	r3, [pc, #424]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001524:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001526:	23c0      	movs	r3, #192	; 0xc0
 8001528:	029b      	lsls	r3, r3, #10
 800152a:	4013      	ands	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d03b      	beq.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	23c0      	movs	r3, #192	; 0xc0
 800153a:	029b      	lsls	r3, r3, #10
 800153c:	4013      	ands	r3, r2
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	429a      	cmp	r2, r3
 8001542:	d033      	beq.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2220      	movs	r2, #32
 800154a:	4013      	ands	r3, r2
 800154c:	d02e      	beq.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800154e:	4b5f      	ldr	r3, [pc, #380]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001552:	4a60      	ldr	r2, [pc, #384]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8001554:	4013      	ands	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001558:	4b5c      	ldr	r3, [pc, #368]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800155a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800155c:	4b5b      	ldr	r3, [pc, #364]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800155e:	2180      	movs	r1, #128	; 0x80
 8001560:	0309      	lsls	r1, r1, #12
 8001562:	430a      	orrs	r2, r1
 8001564:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001566:	4b59      	ldr	r3, [pc, #356]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001568:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800156a:	4b58      	ldr	r3, [pc, #352]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800156c:	495a      	ldr	r1, [pc, #360]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800156e:	400a      	ands	r2, r1
 8001570:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001572:	4b56      	ldr	r3, [pc, #344]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4013      	ands	r3, r2
 8001580:	d014      	beq.n	80015ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff f937 	bl	80007f4 <HAL_GetTick>
 8001586:	0003      	movs	r3, r0
 8001588:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800158a:	e009      	b.n	80015a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158c:	f7ff f932 	bl	80007f4 <HAL_GetTick>
 8001590:	0002      	movs	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	4a51      	ldr	r2, [pc, #324]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d901      	bls.n	80015a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e091      	b.n	80016c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015a0:	4b4a      	ldr	r3, [pc, #296]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80015a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4013      	ands	r3, r2
 80015aa:	d0ef      	beq.n	800158c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2220      	movs	r2, #32
 80015b2:	4013      	ands	r3, r2
 80015b4:	d01f      	beq.n	80015f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	23c0      	movs	r3, #192	; 0xc0
 80015bc:	029b      	lsls	r3, r3, #10
 80015be:	401a      	ands	r2, r3
 80015c0:	23c0      	movs	r3, #192	; 0xc0
 80015c2:	029b      	lsls	r3, r3, #10
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d10c      	bne.n	80015e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80015c8:	4b40      	ldr	r3, [pc, #256]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a44      	ldr	r2, [pc, #272]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	23c0      	movs	r3, #192	; 0xc0
 80015d8:	039b      	lsls	r3, r3, #14
 80015da:	401a      	ands	r2, r3
 80015dc:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80015de:	430a      	orrs	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80015e4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	23c0      	movs	r3, #192	; 0xc0
 80015ec:	029b      	lsls	r3, r3, #10
 80015ee:	401a      	ands	r2, r3
 80015f0:	4b36      	ldr	r3, [pc, #216]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80015f2:	430a      	orrs	r2, r1
 80015f4:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015f6:	2317      	movs	r3, #23
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001600:	4b32      	ldr	r3, [pc, #200]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001604:	4b31      	ldr	r3, [pc, #196]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001606:	4937      	ldr	r1, [pc, #220]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001608:	400a      	ands	r2, r1
 800160a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2201      	movs	r2, #1
 8001612:	4013      	ands	r3, r2
 8001614:	d009      	beq.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	2203      	movs	r2, #3
 800161c:	4393      	bics	r3, r2
 800161e:	0019      	movs	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001626:	430a      	orrs	r2, r1
 8001628:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2202      	movs	r2, #2
 8001630:	4013      	ands	r3, r2
 8001632:	d009      	beq.n	8001648 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	220c      	movs	r2, #12
 800163a:	4393      	bics	r3, r2
 800163c:	0019      	movs	r1, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001644:	430a      	orrs	r2, r1
 8001646:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2204      	movs	r2, #4
 800164e:	4013      	ands	r3, r2
 8001650:	d009      	beq.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	4a24      	ldr	r2, [pc, #144]	; (80016e8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001658:	4013      	ands	r3, r2
 800165a:	0019      	movs	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001662:	430a      	orrs	r2, r1
 8001664:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2208      	movs	r2, #8
 800166c:	4013      	ands	r3, r2
 800166e:	d009      	beq.n	8001684 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	4a1d      	ldr	r2, [pc, #116]	; (80016ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001676:	4013      	ands	r3, r2
 8001678:	0019      	movs	r1, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001680:	430a      	orrs	r2, r1
 8001682:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4013      	ands	r3, r2
 800168e:	d009      	beq.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	4a0f      	ldr	r2, [pc, #60]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8001696:	4013      	ands	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80016a0:	430a      	orrs	r2, r1
 80016a2:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	4013      	ands	r3, r2
 80016ac:	d009      	beq.n	80016c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	0019      	movs	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69da      	ldr	r2, [r3, #28]
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80016be:	430a      	orrs	r2, r1
 80016c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b006      	add	sp, #24
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40007000 	.word	0x40007000
 80016d4:	fffcffff 	.word	0xfffcffff
 80016d8:	fff7ffff 	.word	0xfff7ffff
 80016dc:	00001388 	.word	0x00001388
 80016e0:	ffcfffff 	.word	0xffcfffff
 80016e4:	efffffff 	.word	0xefffffff
 80016e8:	fffff3ff 	.word	0xfffff3ff
 80016ec:	ffffcfff 	.word	0xffffcfff
 80016f0:	fff3ffff 	.word	0xfff3ffff

080016f4 <LL_RTC_SetHourFormat>:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetHourFormat(RTC_TypeDef *RTCx, uint32_t HourFormat)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2240      	movs	r2, #64	; 0x40
 8001704:	4393      	bics	r3, r2
 8001706:	001a      	movs	r2, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	609a      	str	r2, [r3, #8]
}
 8001710:	46c0      	nop			; (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	b002      	add	sp, #8
 8001716:	bd80      	pop	{r7, pc}

08001718 <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	4252      	negs	r2, r2
 8001726:	60da      	str	r2, [r3, #12]
}
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	b002      	add	sp, #8
 800172e:	bd80      	pop	{r7, pc}

08001730 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2281      	movs	r2, #129	; 0x81
 800173c:	4252      	negs	r2, r2
 800173e:	60da      	str	r2, [r3, #12]
}
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	b002      	add	sp, #8
 8001746:	bd80      	pop	{r7, pc}

08001748 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <LL_RTC_SetAsynchPrescaler+0x24>)
 8001758:	401a      	ands	r2, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	041b      	lsls	r3, r3, #16
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	611a      	str	r2, [r3, #16]
}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b002      	add	sp, #8
 800176a:	bd80      	pop	{r7, pc}
 800176c:	ff80ffff 	.word	0xff80ffff

08001770 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	0bdb      	lsrs	r3, r3, #15
 8001780:	03da      	lsls	r2, r3, #15
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	611a      	str	r2, [r3, #16]
}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b002      	add	sp, #8
 8001790:	bd80      	pop	{r7, pc}

08001792 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	22ff      	movs	r2, #255	; 0xff
 800179e:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b002      	add	sp, #8
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	22ca      	movs	r2, #202	; 0xca
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2253      	movs	r2, #83	; 0x53
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017bc:	46c0      	nop			; (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	b002      	add	sp, #8
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF)) ? 1UL : 0UL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2240      	movs	r2, #64	; 0x40
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b40      	cmp	r3, #64	; 0x40
 80017d6:	d101      	bne.n	80017dc <LL_RTC_IsActiveFlag_INIT+0x18>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <LL_RTC_IsActiveFlag_INIT+0x1a>
 80017dc:	2300      	movs	r3, #0
}
 80017de:	0018      	movs	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b002      	add	sp, #8
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	025b      	lsls	r3, r3, #9
 80017f4:	4013      	ands	r3, r2
 80017f6:	4a05      	ldr	r2, [pc, #20]	; (800180c <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 80017f8:	4694      	mov	ip, r2
 80017fa:	4463      	add	r3, ip
 80017fc:	425a      	negs	r2, r3
 80017fe:	4153      	adcs	r3, r2
 8001800:	b2db      	uxtb	r3, r3
}
 8001802:	0018      	movs	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	e000e010 	.word	0xe000e010
 800180c:	ffff0000 	.word	0xffff0000

08001810 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800181a:	240f      	movs	r4, #15
 800181c:	193b      	adds	r3, r7, r4
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	0018      	movs	r0, r3
 8001826:	f7ff ffbf 	bl	80017a8 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	0018      	movs	r0, r3
 800182e:	f000 f82a 	bl	8001886 <LL_RTC_EnterInitMode>
 8001832:	0003      	movs	r3, r0
 8001834:	2b01      	cmp	r3, #1
 8001836:	d01b      	beq.n	8001870 <LL_RTC_Init+0x60>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	0011      	movs	r1, r2
 8001840:	0018      	movs	r0, r3
 8001842:	f7ff ff57 	bl	80016f4 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	0011      	movs	r1, r2
 800184e:	0018      	movs	r0, r3
 8001850:	f7ff ff8e 	bl	8001770 <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	0011      	movs	r1, r2
 800185c:	0018      	movs	r0, r3
 800185e:	f7ff ff73 	bl	8001748 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	0018      	movs	r0, r3
 8001866:	f7ff ff63 	bl	8001730 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 800186a:	193b      	adds	r3, r7, r4
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	0018      	movs	r0, r3
 8001874:	f7ff ff8d 	bl	8001792 <LL_RTC_EnableWriteProtection>

  return status;
 8001878:	230f      	movs	r3, #15
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	781b      	ldrb	r3, [r3, #0]
}
 800187e:	0018      	movs	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	b005      	add	sp, #20
 8001884:	bd90      	pop	{r4, r7, pc}

08001886 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 800188e:	23fa      	movs	r3, #250	; 0xfa
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8001894:	2317      	movs	r3, #23
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	613b      	str	r3, [r7, #16]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	0018      	movs	r0, r3
 80018a4:	f7ff ff8e 	bl	80017c4 <LL_RTC_IsActiveFlag_INIT>
 80018a8:	1e03      	subs	r3, r0, #0
 80018aa:	d129      	bne.n	8001900 <LL_RTC_EnterInitMode+0x7a>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	0018      	movs	r0, r3
 80018b0:	f7ff ff32 	bl	8001718 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7ff ff84 	bl	80017c4 <LL_RTC_IsActiveFlag_INIT>
 80018bc:	0003      	movs	r3, r0
 80018be:	613b      	str	r3, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 80018c0:	e018      	b.n	80018f4 <LL_RTC_EnterInitMode+0x6e>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80018c2:	f7ff ff91 	bl	80017e8 <LL_SYSTICK_IsActiveCounterFlag>
 80018c6:	0003      	movs	r3, r0
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d102      	bne.n	80018d2 <LL_RTC_EnterInitMode+0x4c>
      {
        timeout --;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff ff75 	bl	80017c4 <LL_RTC_IsActiveFlag_INIT>
 80018da:	0003      	movs	r3, r0
 80018dc:	613b      	str	r3, [r7, #16]
      if (timeout == 0U)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2017      	movs	r0, #23
 80018e2:	183a      	adds	r2, r7, r0
 80018e4:	1839      	adds	r1, r7, r0
 80018e6:	7809      	ldrb	r1, [r1, #0]
 80018e8:	7011      	strb	r1, [r2, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d102      	bne.n	80018f4 <LL_RTC_EnterInitMode+0x6e>
      {
        status = ERROR;
 80018ee:	183b      	adds	r3, r7, r0
 80018f0:	2201      	movs	r2, #1
 80018f2:	701a      	strb	r2, [r3, #0]
    while ((timeout != 0U) && (tmp != 1U))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <LL_RTC_EnterInitMode+0x7a>
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d1e0      	bne.n	80018c2 <LL_RTC_EnterInitMode+0x3c>
      }
    }
  }
  return status;
 8001900:	2317      	movs	r3, #23
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	781b      	ldrb	r3, [r3, #0]
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b006      	add	sp, #24
 800190c:	bd80      	pop	{r7, pc}

0800190e <memset>:
 800190e:	0003      	movs	r3, r0
 8001910:	1882      	adds	r2, r0, r2
 8001912:	4293      	cmp	r3, r2
 8001914:	d100      	bne.n	8001918 <memset+0xa>
 8001916:	4770      	bx	lr
 8001918:	7019      	strb	r1, [r3, #0]
 800191a:	3301      	adds	r3, #1
 800191c:	e7f9      	b.n	8001912 <memset+0x4>
	...

08001920 <__libc_init_array>:
 8001920:	b570      	push	{r4, r5, r6, lr}
 8001922:	2600      	movs	r6, #0
 8001924:	4c0c      	ldr	r4, [pc, #48]	; (8001958 <__libc_init_array+0x38>)
 8001926:	4d0d      	ldr	r5, [pc, #52]	; (800195c <__libc_init_array+0x3c>)
 8001928:	1b64      	subs	r4, r4, r5
 800192a:	10a4      	asrs	r4, r4, #2
 800192c:	42a6      	cmp	r6, r4
 800192e:	d109      	bne.n	8001944 <__libc_init_array+0x24>
 8001930:	2600      	movs	r6, #0
 8001932:	f000 f819 	bl	8001968 <_init>
 8001936:	4c0a      	ldr	r4, [pc, #40]	; (8001960 <__libc_init_array+0x40>)
 8001938:	4d0a      	ldr	r5, [pc, #40]	; (8001964 <__libc_init_array+0x44>)
 800193a:	1b64      	subs	r4, r4, r5
 800193c:	10a4      	asrs	r4, r4, #2
 800193e:	42a6      	cmp	r6, r4
 8001940:	d105      	bne.n	800194e <__libc_init_array+0x2e>
 8001942:	bd70      	pop	{r4, r5, r6, pc}
 8001944:	00b3      	lsls	r3, r6, #2
 8001946:	58eb      	ldr	r3, [r5, r3]
 8001948:	4798      	blx	r3
 800194a:	3601      	adds	r6, #1
 800194c:	e7ee      	b.n	800192c <__libc_init_array+0xc>
 800194e:	00b3      	lsls	r3, r6, #2
 8001950:	58eb      	ldr	r3, [r5, r3]
 8001952:	4798      	blx	r3
 8001954:	3601      	adds	r6, #1
 8001956:	e7f2      	b.n	800193e <__libc_init_array+0x1e>
 8001958:	080019a4 	.word	0x080019a4
 800195c:	080019a4 	.word	0x080019a4
 8001960:	080019a8 	.word	0x080019a8
 8001964:	080019a4 	.word	0x080019a4

08001968 <_init>:
 8001968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800196e:	bc08      	pop	{r3}
 8001970:	469e      	mov	lr, r3
 8001972:	4770      	bx	lr

08001974 <_fini>:
 8001974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800197a:	bc08      	pop	{r3}
 800197c:	469e      	mov	lr, r3
 800197e:	4770      	bx	lr
