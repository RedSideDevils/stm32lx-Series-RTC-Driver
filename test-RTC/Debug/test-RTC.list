
test-RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002478  08002478  00012478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024a0  080024a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080024a0  080024a0  000124a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024a8  080024a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024a8  080024a8  000124a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024ac  080024ac  000124ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000000c  080024bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  080024bc  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004458  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001420  00000000  00000000  000244cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000578  00000000  00000000  000258f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003fe  00000000  00000000  00025e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011930  00000000  00000000  00026266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000707b  00000000  00000000  00037b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006da42  00000000  00000000  0003ec11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000011f4  00000000  00000000  000ac654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000ad848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002460 	.word	0x08002460

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002460 	.word	0x08002460

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fe7e 	bl	80011ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f808 	bl	80004c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8a6 	bl	8000604 <MX_GPIO_Init>
  MX_RTC_Init();
 80004b8:	f000 f87a 	bl	80005b0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  myMain();
 80004bc:	f000 fe06 	bl	80010cc <myMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <main+0x18>
	...

080004c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b09b      	sub	sp, #108	; 0x6c
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	2434      	movs	r4, #52	; 0x34
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	0018      	movs	r0, r3
 80004d0:	2334      	movs	r3, #52	; 0x34
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f001 ff97 	bl	8002408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004da:	2320      	movs	r3, #32
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	0018      	movs	r0, r3
 80004e0:	2314      	movs	r3, #20
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f001 ff8f 	bl	8002408 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ea:	003b      	movs	r3, r7
 80004ec:	0018      	movs	r0, r3
 80004ee:	2320      	movs	r3, #32
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f001 ff88 	bl	8002408 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f8:	4b2b      	ldr	r3, [pc, #172]	; (80005a8 <SystemClock_Config+0xe4>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a2b      	ldr	r2, [pc, #172]	; (80005ac <SystemClock_Config+0xe8>)
 80004fe:	401a      	ands	r2, r3
 8000500:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <SystemClock_Config+0xe4>)
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	0109      	lsls	r1, r1, #4
 8000506:	430a      	orrs	r2, r1
 8000508:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800050a:	0021      	movs	r1, r4
 800050c:	187b      	adds	r3, r7, r1
 800050e:	220a      	movs	r2, #10
 8000510:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2201      	movs	r2, #1
 8000516:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2210      	movs	r2, #16
 800051c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2201      	movs	r2, #1
 8000522:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2202      	movs	r2, #2
 8000528:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2280      	movs	r2, #128	; 0x80
 8000534:	02d2      	lsls	r2, r2, #11
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	03d2      	lsls	r2, r2, #15
 800053e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	187b      	adds	r3, r7, r1
 8000542:	0018      	movs	r0, r3
 8000544:	f000 ff7a 	bl	800143c <HAL_RCC_OscConfig>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800054c:	f000 f87c 	bl	8000648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000550:	2120      	movs	r1, #32
 8000552:	187b      	adds	r3, r7, r1
 8000554:	220f      	movs	r2, #15
 8000556:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2203      	movs	r2, #3
 800055c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2101      	movs	r1, #1
 8000574:	0018      	movs	r0, r3
 8000576:	f001 fadd 	bl	8001b34 <HAL_RCC_ClockConfig>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800057e:	f000 f863 	bl	8000648 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000582:	003b      	movs	r3, r7
 8000584:	2220      	movs	r2, #32
 8000586:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000588:	003b      	movs	r3, r7
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	0292      	lsls	r2, r2, #10
 800058e:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000590:	003b      	movs	r3, r7
 8000592:	0018      	movs	r0, r3
 8000594:	f001 fcbc 	bl	8001f10 <HAL_RCCEx_PeriphCLKConfig>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800059c:	f000 f854 	bl	8000648 <Error_Handler>
  }
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b01b      	add	sp, #108	; 0x6c
 80005a6:	bd90      	pop	{r4, r7, pc}
 80005a8:	40007000 	.word	0x40007000
 80005ac:	ffffe7ff 	.word	0xffffe7ff

080005b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <MX_RTC_Init+0x4c>)
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <MX_RTC_Init+0x50>)
 80005b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <MX_RTC_Init+0x4c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <MX_RTC_Init+0x4c>)
 80005c2:	227f      	movs	r2, #127	; 0x7f
 80005c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <MX_RTC_Init+0x4c>)
 80005c8:	22ff      	movs	r2, #255	; 0xff
 80005ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <MX_RTC_Init+0x4c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <MX_RTC_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <MX_RTC_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <MX_RTC_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <MX_RTC_Init+0x4c>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 fddc 	bl	80021a4 <HAL_RTC_Init>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80005f0:	f000 f82a 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	20000028 	.word	0x20000028
 8000600:	40002800 	.word	0x40002800

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_GPIO_Init+0x40>)
 800060c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_GPIO_Init+0x40>)
 8000610:	2104      	movs	r1, #4
 8000612:	430a      	orrs	r2, r1
 8000614:	62da      	str	r2, [r3, #44]	; 0x2c
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MX_GPIO_Init+0x40>)
 8000618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800061a:	2204      	movs	r2, #4
 800061c:	4013      	ands	r3, r2
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_GPIO_Init+0x40>)
 8000624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_GPIO_Init+0x40>)
 8000628:	2101      	movs	r1, #1
 800062a:	430a      	orrs	r2, r1
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <MX_GPIO_Init+0x40>)
 8000630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000632:	2201      	movs	r2, #1
 8000634:	4013      	ands	r3, r2
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	40021000 	.word	0x40021000

08000648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064c:	b672      	cpsid	i
}
 800064e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000650:	e7fe      	b.n	8000650 <Error_Handler+0x8>
	...

08000654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <HAL_MspInit+0x24>)
 800065a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_MspInit+0x24>)
 800065e:	2101      	movs	r1, #1
 8000660:	430a      	orrs	r2, r1
 8000662:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <HAL_MspInit+0x24>)
 8000666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <HAL_MspInit+0x24>)
 800066a:	2180      	movs	r1, #128	; 0x80
 800066c:	0549      	lsls	r1, r1, #21
 800066e:	430a      	orrs	r2, r1
 8000670:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000

0800067c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <HAL_RTC_MspInit+0x28>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d106      	bne.n	800069c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_RTC_MspInit+0x2c>)
 8000690:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_RTC_MspInit+0x2c>)
 8000694:	2180      	movs	r1, #128	; 0x80
 8000696:	02c9      	lsls	r1, r1, #11
 8000698:	430a      	orrs	r2, r1
 800069a:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b002      	add	sp, #8
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40002800 	.word	0x40002800
 80006a8:	40021000 	.word	0x40021000

080006ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <NMI_Handler+0x4>

080006b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <HardFault_Handler+0x4>

080006b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d0:	f000 fdc0 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80006e6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e8:	f7ff fff7 	bl	80006da <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ec:	480c      	ldr	r0, [pc, #48]	; (8000720 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ee:	490d      	ldr	r1, [pc, #52]	; (8000724 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f0:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <LoopForever+0xe>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000704:	4c0a      	ldr	r4, [pc, #40]	; (8000730 <LoopForever+0x16>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000712:	f001 fe81 	bl	8002418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000716:	f7ff fec7 	bl	80004a8 <main>

0800071a <LoopForever>:

LoopForever:
    b LoopForever
 800071a:	e7fe      	b.n	800071a <LoopForever>
   ldr   r0, =_estack
 800071c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000728:	080024b0 	.word	0x080024b0
  ldr r2, =_sbss
 800072c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000730:	20000050 	.word	0x20000050

08000734 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC1_COMP_IRQHandler>
	...

08000738 <rtc_init_clock>:
uint8_t bcd_to_dec(uint8_t bcd);
// ##########################


RTC_Status_t rtc_init_clock(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	// ### ENABLE PWR CLOCK ###
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800073e:	4b37      	ldr	r3, [pc, #220]	; (800081c <rtc_init_clock+0xe4>)
 8000740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000742:	4b36      	ldr	r3, [pc, #216]	; (800081c <rtc_init_clock+0xe4>)
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	0549      	lsls	r1, r1, #21
 8000748:	430a      	orrs	r2, r1
 800074a:	639a      	str	r2, [r3, #56]	; 0x38

	// ### ENABLE ACCESS TO RTC AND BACKUP REGISTERS ###
	PWR->CR |= PWR_CR_DBP;
 800074c:	4b34      	ldr	r3, [pc, #208]	; (8000820 <rtc_init_clock+0xe8>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b33      	ldr	r3, [pc, #204]	; (8000820 <rtc_init_clock+0xe8>)
 8000752:	2180      	movs	r1, #128	; 0x80
 8000754:	0049      	lsls	r1, r1, #1
 8000756:	430a      	orrs	r2, r1
 8000758:	601a      	str	r2, [r3, #0]

	// ### RESET BACKUP DOMAIN ###
	RCC->CSR |= RCC_CSR_RTCRST;
 800075a:	4b30      	ldr	r3, [pc, #192]	; (800081c <rtc_init_clock+0xe4>)
 800075c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800075e:	4b2f      	ldr	r3, [pc, #188]	; (800081c <rtc_init_clock+0xe4>)
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	0309      	lsls	r1, r1, #12
 8000764:	430a      	orrs	r2, r1
 8000766:	651a      	str	r2, [r3, #80]	; 0x50
	RCC->CSR &= ~RCC_CSR_RTCRST;
 8000768:	4b2c      	ldr	r3, [pc, #176]	; (800081c <rtc_init_clock+0xe4>)
 800076a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800076c:	4b2b      	ldr	r3, [pc, #172]	; (800081c <rtc_init_clock+0xe4>)
 800076e:	492d      	ldr	r1, [pc, #180]	; (8000824 <rtc_init_clock+0xec>)
 8000770:	400a      	ands	r2, r1
 8000772:	651a      	str	r2, [r3, #80]	; 0x50

	// ### SET Driving capability to medium high ###
    RCC->CSR &= ~RCC_CSR_LSEDRV_Msk;
 8000774:	4b29      	ldr	r3, [pc, #164]	; (800081c <rtc_init_clock+0xe4>)
 8000776:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <rtc_init_clock+0xe4>)
 800077a:	492b      	ldr	r1, [pc, #172]	; (8000828 <rtc_init_clock+0xf0>)
 800077c:	400a      	ands	r2, r1
 800077e:	651a      	str	r2, [r3, #80]	; 0x50
    RCC->CSR |= (0x02 << RCC_CSR_LSEDRV_Pos);
 8000780:	4b26      	ldr	r3, [pc, #152]	; (800081c <rtc_init_clock+0xe4>)
 8000782:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000784:	4b25      	ldr	r3, [pc, #148]	; (800081c <rtc_init_clock+0xe4>)
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	0149      	lsls	r1, r1, #5
 800078a:	430a      	orrs	r2, r1
 800078c:	651a      	str	r2, [r3, #80]	; 0x50

    // ### LSE CLOCK START ###
    RCC->CSR |= RCC_CSR_LSEON;
 800078e:	4b23      	ldr	r3, [pc, #140]	; (800081c <rtc_init_clock+0xe4>)
 8000790:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <rtc_init_clock+0xe4>)
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	0049      	lsls	r1, r1, #1
 8000798:	430a      	orrs	r2, r1
 800079a:	651a      	str	r2, [r3, #80]	; 0x50

    // ### CHECK IF LSE CLOCK IS READY ###
    uint32_t now = HAL_GetTick();
 800079c:	f000 fd6c 	bl	8001278 <HAL_GetTick>
 80007a0:	0003      	movs	r3, r0
 80007a2:	607b      	str	r3, [r7, #4]

    while((RCC->CSR & RCC_CSR_LSERDY) != RCC_CSR_LSERDY)
 80007a4:	e00a      	b.n	80007bc <rtc_init_clock+0x84>
    {
    	if(HAL_GetTick() - now >= WAIT_LSE_ON_TIMEOUT)
 80007a6:	f000 fd67 	bl	8001278 <HAL_GetTick>
 80007aa:	0002      	movs	r2, r0
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	1ad2      	subs	r2, r2, r3
 80007b0:	23fa      	movs	r3, #250	; 0xfa
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d301      	bcc.n	80007bc <rtc_init_clock+0x84>
    	{
    		return RTC_ERROR;
 80007b8:	2300      	movs	r3, #0
 80007ba:	e02a      	b.n	8000812 <rtc_init_clock+0xda>
    while((RCC->CSR & RCC_CSR_LSERDY) != RCC_CSR_LSERDY)
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <rtc_init_clock+0xe4>)
 80007be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	401a      	ands	r2, r3
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d1eb      	bne.n	80007a6 <rtc_init_clock+0x6e>
    	}
    }

    // ### SET PRESCALER TO 1HZ ###
    RTC->PRER = (127 << RTC_PRER_PREDIV_S_Pos) | (255 << RTC_PRER_PREDIV_A_Pos);
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <rtc_init_clock+0xf4>)
 80007d0:	4a17      	ldr	r2, [pc, #92]	; (8000830 <rtc_init_clock+0xf8>)
 80007d2:	611a      	str	r2, [r3, #16]

    while (!(RTC->ISR & RTC_ISR_RSF))
 80007d4:	e00a      	b.n	80007ec <rtc_init_clock+0xb4>
    {
    	if(HAL_GetTick() - now >= 1000)
 80007d6:	f000 fd4f 	bl	8001278 <HAL_GetTick>
 80007da:	0002      	movs	r2, r0
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	1ad2      	subs	r2, r2, r3
 80007e0:	23fa      	movs	r3, #250	; 0xfa
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d301      	bcc.n	80007ec <rtc_init_clock+0xb4>
    	{
    		return RTC_ERROR;
 80007e8:	2300      	movs	r3, #0
 80007ea:	e012      	b.n	8000812 <rtc_init_clock+0xda>
    while (!(RTC->ISR & RTC_ISR_RSF))
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <rtc_init_clock+0xf4>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	2220      	movs	r2, #32
 80007f2:	4013      	ands	r3, r2
 80007f4:	d0ef      	beq.n	80007d6 <rtc_init_clock+0x9e>
    	}
    }

    // ### CHANGING RTC SOURCE TO LSE ###
    RCC->CSR &= ~RCC_CSR_RTCSEL_Msk;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <rtc_init_clock+0xe4>)
 80007f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <rtc_init_clock+0xe4>)
 80007fc:	490d      	ldr	r1, [pc, #52]	; (8000834 <rtc_init_clock+0xfc>)
 80007fe:	400a      	ands	r2, r1
 8000800:	651a      	str	r2, [r3, #80]	; 0x50
    RCC->CSR |= RCC_CSR_RTCSEL_LSE;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <rtc_init_clock+0xe4>)
 8000804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <rtc_init_clock+0xe4>)
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	0249      	lsls	r1, r1, #9
 800080c:	430a      	orrs	r2, r1
 800080e:	651a      	str	r2, [r3, #80]	; 0x50

    return RTC_OK;
 8000810:	2301      	movs	r3, #1
}
 8000812:	0018      	movs	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40021000 	.word	0x40021000
 8000820:	40007000 	.word	0x40007000
 8000824:	fff7ffff 	.word	0xfff7ffff
 8000828:	ffffe7ff 	.word	0xffffe7ff
 800082c:	40002800 	.word	0x40002800
 8000830:	00ff007f 	.word	0x00ff007f
 8000834:	fffcffff 	.word	0xfffcffff

08000838 <rtc_start_clock>:


RTC_Status_t rtc_start_clock(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
    // ### ENABLE RTC CLOCK ###
    RCC->CSR |= RCC_CSR_RTCEN;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <rtc_start_clock+0x48>)
 8000840:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <rtc_start_clock+0x48>)
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	02c9      	lsls	r1, r1, #11
 8000848:	430a      	orrs	r2, r1
 800084a:	651a      	str	r2, [r3, #80]	; 0x50

    // ### WAIT UNTIL RTC IS SYNC ###
    uint32_t now = HAL_GetTick();
 800084c:	f000 fd14 	bl	8001278 <HAL_GetTick>
 8000850:	0003      	movs	r3, r0
 8000852:	607b      	str	r3, [r7, #4]

    while (!(RTC->ISR & RTC_ISR_RSF))
 8000854:	e009      	b.n	800086a <rtc_start_clock+0x32>
    {
    	if(HAL_GetTick() - now >= 10000)
 8000856:	f000 fd0f 	bl	8001278 <HAL_GetTick>
 800085a:	0002      	movs	r2, r0
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	4a08      	ldr	r2, [pc, #32]	; (8000884 <rtc_start_clock+0x4c>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d901      	bls.n	800086a <rtc_start_clock+0x32>
    	{
    		return RTC_ERROR;
 8000866:	2300      	movs	r3, #0
 8000868:	e005      	b.n	8000876 <rtc_start_clock+0x3e>
    while (!(RTC->ISR & RTC_ISR_RSF))
 800086a:	4b07      	ldr	r3, [pc, #28]	; (8000888 <rtc_start_clock+0x50>)
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	2220      	movs	r2, #32
 8000870:	4013      	ands	r3, r2
 8000872:	d0f0      	beq.n	8000856 <rtc_start_clock+0x1e>
    	}
    }

    return RTC_OK;
 8000874:	2301      	movs	r3, #1
}
 8000876:	0018      	movs	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	b002      	add	sp, #8
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	40021000 	.word	0x40021000
 8000884:	0000270f 	.word	0x0000270f
 8000888:	40002800 	.word	0x40002800

0800088c <rtc_set_time>:
    return RTC_OK;
}


RTC_Status_t rtc_set_time(RTC_Time_t *m_time)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	// ### ENABLE WRITE ACCESS ###
	rtc_disable_protection();
 8000894:	f000 fbde 	bl	8001054 <rtc_disable_protection>

	// ### ENABLE RTC INIT MODE ###
	RTC->ISR |= RTC_ISR_INIT;
 8000898:	4b3f      	ldr	r3, [pc, #252]	; (8000998 <rtc_set_time+0x10c>)
 800089a:	68da      	ldr	r2, [r3, #12]
 800089c:	4b3e      	ldr	r3, [pc, #248]	; (8000998 <rtc_set_time+0x10c>)
 800089e:	2180      	movs	r1, #128	; 0x80
 80008a0:	430a      	orrs	r2, r1
 80008a2:	60da      	str	r2, [r3, #12]

	// ### WAIT WHILE RTC INIT ###
	uint32_t now = HAL_GetTick();
 80008a4:	f000 fce8 	bl	8001278 <HAL_GetTick>
 80008a8:	0003      	movs	r3, r0
 80008aa:	60fb      	str	r3, [r7, #12]

	while (!(RTC->ISR & RTC_ISR_INITF))
 80008ac:	e00a      	b.n	80008c4 <rtc_set_time+0x38>
	{
    	if(HAL_GetTick() - now >= 1000)
 80008ae:	f000 fce3 	bl	8001278 <HAL_GetTick>
 80008b2:	0002      	movs	r2, r0
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	1ad2      	subs	r2, r2, r3
 80008b8:	23fa      	movs	r3, #250	; 0xfa
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	429a      	cmp	r2, r3
 80008be:	d301      	bcc.n	80008c4 <rtc_set_time+0x38>
    	{
    		return RTC_ERROR;
 80008c0:	2300      	movs	r3, #0
 80008c2:	e064      	b.n	800098e <rtc_set_time+0x102>
	while (!(RTC->ISR & RTC_ISR_INITF))
 80008c4:	4b34      	ldr	r3, [pc, #208]	; (8000998 <rtc_set_time+0x10c>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	2240      	movs	r2, #64	; 0x40
 80008ca:	4013      	ands	r3, r2
 80008cc:	d0ef      	beq.n	80008ae <rtc_set_time+0x22>
    	}
	}

	// ### SET BCD TIME TO REGISTER ###
	RTC->TR = ((m_time->hours / 10) << RTC_TR_HT_Pos) | ((m_time->hours % 10) << RTC_TR_HU_Pos) |
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	210a      	movs	r1, #10
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff fc17 	bl	8000108 <__udivsi3>
 80008da:	0003      	movs	r3, r0
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	051c      	lsls	r4, r3, #20
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	210a      	movs	r1, #10
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff fc94 	bl	8000214 <__aeabi_uidivmod>
 80008ec:	000b      	movs	r3, r1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	041b      	lsls	r3, r3, #16
 80008f2:	431c      	orrs	r4, r3
			  ((m_time->minutes / 10) << RTC_TR_MNT_Pos) | ((m_time->minutes % 10) << RTC_TR_MNU_Pos) |
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	785b      	ldrb	r3, [r3, #1]
 80008f8:	210a      	movs	r1, #10
 80008fa:	0018      	movs	r0, r3
 80008fc:	f7ff fc04 	bl	8000108 <__udivsi3>
 8000900:	0003      	movs	r3, r0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	031b      	lsls	r3, r3, #12
	RTC->TR = ((m_time->hours / 10) << RTC_TR_HT_Pos) | ((m_time->hours % 10) << RTC_TR_HU_Pos) |
 8000906:	431c      	orrs	r4, r3
			  ((m_time->minutes / 10) << RTC_TR_MNT_Pos) | ((m_time->minutes % 10) << RTC_TR_MNU_Pos) |
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	785b      	ldrb	r3, [r3, #1]
 800090c:	210a      	movs	r1, #10
 800090e:	0018      	movs	r0, r3
 8000910:	f7ff fc80 	bl	8000214 <__aeabi_uidivmod>
 8000914:	000b      	movs	r3, r1
 8000916:	b2db      	uxtb	r3, r3
 8000918:	021b      	lsls	r3, r3, #8
 800091a:	431c      	orrs	r4, r3
			  ((m_time->seconds / 10) << RTC_TR_ST_Pos) | (m_time->seconds % 10);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	789b      	ldrb	r3, [r3, #2]
 8000920:	210a      	movs	r1, #10
 8000922:	0018      	movs	r0, r3
 8000924:	f7ff fbf0 	bl	8000108 <__udivsi3>
 8000928:	0003      	movs	r3, r0
 800092a:	b2db      	uxtb	r3, r3
 800092c:	011b      	lsls	r3, r3, #4
			  ((m_time->minutes / 10) << RTC_TR_MNT_Pos) | ((m_time->minutes % 10) << RTC_TR_MNU_Pos) |
 800092e:	431c      	orrs	r4, r3
			  ((m_time->seconds / 10) << RTC_TR_ST_Pos) | (m_time->seconds % 10);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	789b      	ldrb	r3, [r3, #2]
 8000934:	210a      	movs	r1, #10
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff fc6c 	bl	8000214 <__aeabi_uidivmod>
 800093c:	000b      	movs	r3, r1
 800093e:	b2db      	uxtb	r3, r3
 8000940:	0022      	movs	r2, r4
 8000942:	431a      	orrs	r2, r3
	RTC->TR = ((m_time->hours / 10) << RTC_TR_HT_Pos) | ((m_time->hours % 10) << RTC_TR_HU_Pos) |
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <rtc_set_time+0x10c>)
 8000946:	601a      	str	r2, [r3, #0]

	// ### CONFIG RTC_MODE 24 / 12 hours mode ###
	RTC->CR &= ~RTC_CR_FMT;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <rtc_set_time+0x10c>)
 800094a:	689a      	ldr	r2, [r3, #8]
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <rtc_set_time+0x10c>)
 800094e:	2140      	movs	r1, #64	; 0x40
 8000950:	438a      	bics	r2, r1
 8000952:	609a      	str	r2, [r3, #8]

	// ### EXIT INIT MODE ###
	RTC->ISR &= ~RTC_ISR_INIT;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <rtc_set_time+0x10c>)
 8000956:	68da      	ldr	r2, [r3, #12]
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <rtc_set_time+0x10c>)
 800095a:	2180      	movs	r1, #128	; 0x80
 800095c:	438a      	bics	r2, r1
 800095e:	60da      	str	r2, [r3, #12]

	now = HAL_GetTick();
 8000960:	f000 fc8a 	bl	8001278 <HAL_GetTick>
 8000964:	0003      	movs	r3, r0
 8000966:	60fb      	str	r3, [r7, #12]

	while (!(RTC->ISR & RTC_ISR_RSF))
 8000968:	e009      	b.n	800097e <rtc_set_time+0xf2>
	{
    	if(HAL_GetTick() - now >= 10000)
 800096a:	f000 fc85 	bl	8001278 <HAL_GetTick>
 800096e:	0002      	movs	r2, r0
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	1ad3      	subs	r3, r2, r3
 8000974:	4a09      	ldr	r2, [pc, #36]	; (800099c <rtc_set_time+0x110>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d901      	bls.n	800097e <rtc_set_time+0xf2>
    	{
    		return RTC_ERROR;
 800097a:	2300      	movs	r3, #0
 800097c:	e007      	b.n	800098e <rtc_set_time+0x102>
	while (!(RTC->ISR & RTC_ISR_RSF))
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <rtc_set_time+0x10c>)
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	2220      	movs	r2, #32
 8000984:	4013      	ands	r3, r2
 8000986:	d0f0      	beq.n	800096a <rtc_set_time+0xde>
    	}
	}

	// ### DISABLE WRITE ACCESS ###
	rtc_enable_protection();
 8000988:	f000 fb72 	bl	8001070 <rtc_enable_protection>

	return RTC_OK;
 800098c:	2301      	movs	r3, #1
}
 800098e:	0018      	movs	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	b005      	add	sp, #20
 8000994:	bd90      	pop	{r4, r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	40002800 	.word	0x40002800
 800099c:	0000270f 	.word	0x0000270f

080009a0 <rtc_get_time>:


RTC_Status_t rtc_get_time(RTC_Time_t *m_time)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	// ### CONVERT REGISTERS BCD TO DEC ###
	m_time->hours   = bcd_to_dec((RTC->TR & (RTC_TR_HT_Msk  | RTC_TR_HU_Msk )) >>RTC_TR_HU_Pos);
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <rtc_get_time+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	0c1b      	lsrs	r3, r3, #16
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	223f      	movs	r2, #63	; 0x3f
 80009b2:	4013      	ands	r3, r2
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	0018      	movs	r0, r3
 80009b8:	f000 fb64 	bl	8001084 <bcd_to_dec>
 80009bc:	0003      	movs	r3, r0
 80009be:	001a      	movs	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	701a      	strb	r2, [r3, #0]
	m_time->minutes = bcd_to_dec((RTC->TR & (RTC_TR_MNT_Msk | RTC_TR_MNU_Msk)) >>RTC_TR_MNU_Pos);
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <rtc_get_time+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	227f      	movs	r2, #127	; 0x7f
 80009ce:	4013      	ands	r3, r2
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 fb56 	bl	8001084 <bcd_to_dec>
 80009d8:	0003      	movs	r3, r0
 80009da:	001a      	movs	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	705a      	strb	r2, [r3, #1]
	m_time->seconds = bcd_to_dec((RTC->TR & (RTC_TR_ST_Msk  | RTC_TR_SU_Msk )) >>RTC_TR_SU_Pos);
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <rtc_get_time+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	227f      	movs	r2, #127	; 0x7f
 80009e8:	4013      	ands	r3, r2
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	0018      	movs	r0, r3
 80009ee:	f000 fb49 	bl	8001084 <bcd_to_dec>
 80009f2:	0003      	movs	r3, r0
 80009f4:	001a      	movs	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	709a      	strb	r2, [r3, #2]

	return RTC_OK;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40002800 	.word	0x40002800

08000a08 <rtc_set_date>:


RTC_Status_t rtc_set_date(RTC_Date_t *m_date)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	// ### ENABLE WRITE ACCESS ###
	rtc_disable_protection();
 8000a10:	f000 fb20 	bl	8001054 <rtc_disable_protection>

	// ### ENABLE RTC INIT MODE ###
	RTC->ISR |= RTC_ISR_INIT;
 8000a14:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <rtc_set_date+0x124>)
 8000a16:	68da      	ldr	r2, [r3, #12]
 8000a18:	4b44      	ldr	r3, [pc, #272]	; (8000b2c <rtc_set_date+0x124>)
 8000a1a:	2180      	movs	r1, #128	; 0x80
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	60da      	str	r2, [r3, #12]

	// ### WAIT WHILE RTC INIT ###
	uint32_t now = HAL_GetTick();
 8000a20:	f000 fc2a 	bl	8001278 <HAL_GetTick>
 8000a24:	0003      	movs	r3, r0
 8000a26:	60fb      	str	r3, [r7, #12]

	while (!(RTC->ISR & RTC_ISR_INITF))
 8000a28:	e00a      	b.n	8000a40 <rtc_set_date+0x38>
	{
    	if(HAL_GetTick() - now >= 1000)
 8000a2a:	f000 fc25 	bl	8001278 <HAL_GetTick>
 8000a2e:	0002      	movs	r2, r0
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	1ad2      	subs	r2, r2, r3
 8000a34:	23fa      	movs	r3, #250	; 0xfa
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d301      	bcc.n	8000a40 <rtc_set_date+0x38>
    	{
    		return RTC_ERROR;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e070      	b.n	8000b22 <rtc_set_date+0x11a>
	while (!(RTC->ISR & RTC_ISR_INITF))
 8000a40:	4b3a      	ldr	r3, [pc, #232]	; (8000b2c <rtc_set_date+0x124>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	2240      	movs	r2, #64	; 0x40
 8000a46:	4013      	ands	r3, r2
 8000a48:	d0ef      	beq.n	8000a2a <rtc_set_date+0x22>
    	}
	}

	// ### SET BCD DATE TO REGISTER ###
    RTC->DR = ((m_date->year % 100) / 10 << RTC_DR_YT_Pos) | ((m_date->year % 100) % 10 << RTC_DR_YU_Pos) |
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2164      	movs	r1, #100	; 0x64
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff fbdf 	bl	8000214 <__aeabi_uidivmod>
 8000a56:	000b      	movs	r3, r1
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	210a      	movs	r1, #10
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff fb53 	bl	8000108 <__udivsi3>
 8000a62:	0003      	movs	r3, r0
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	051c      	lsls	r4, r3, #20
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2164      	movs	r1, #100	; 0x64
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff fbd0 	bl	8000214 <__aeabi_uidivmod>
 8000a74:	000b      	movs	r3, r1
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	210a      	movs	r1, #10
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f7ff fbca 	bl	8000214 <__aeabi_uidivmod>
 8000a80:	000b      	movs	r3, r1
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	041b      	lsls	r3, r3, #16
 8000a86:	431c      	orrs	r4, r3
              (m_date->month / 10 << RTC_DR_MT_Pos) | (m_date->month % 10 << RTC_DR_MU_Pos) |
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	785b      	ldrb	r3, [r3, #1]
 8000a8c:	210a      	movs	r1, #10
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f7ff fb3a 	bl	8000108 <__udivsi3>
 8000a94:	0003      	movs	r3, r0
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	031b      	lsls	r3, r3, #12
    RTC->DR = ((m_date->year % 100) / 10 << RTC_DR_YT_Pos) | ((m_date->year % 100) % 10 << RTC_DR_YU_Pos) |
 8000a9a:	431c      	orrs	r4, r3
              (m_date->month / 10 << RTC_DR_MT_Pos) | (m_date->month % 10 << RTC_DR_MU_Pos) |
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	785b      	ldrb	r3, [r3, #1]
 8000aa0:	210a      	movs	r1, #10
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff fbb6 	bl	8000214 <__aeabi_uidivmod>
 8000aa8:	000b      	movs	r3, r1
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	431c      	orrs	r4, r3
              (m_date->day / 10 << RTC_DR_DT_Pos) | (m_date->day % 10 << RTC_DR_DU_Pos);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	789b      	ldrb	r3, [r3, #2]
 8000ab4:	210a      	movs	r1, #10
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f7ff fb26 	bl	8000108 <__udivsi3>
 8000abc:	0003      	movs	r3, r0
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	011b      	lsls	r3, r3, #4
              (m_date->month / 10 << RTC_DR_MT_Pos) | (m_date->month % 10 << RTC_DR_MU_Pos) |
 8000ac2:	431c      	orrs	r4, r3
              (m_date->day / 10 << RTC_DR_DT_Pos) | (m_date->day % 10 << RTC_DR_DU_Pos);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	789b      	ldrb	r3, [r3, #2]
 8000ac8:	210a      	movs	r1, #10
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff fba2 	bl	8000214 <__aeabi_uidivmod>
 8000ad0:	000b      	movs	r3, r1
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	0022      	movs	r2, r4
 8000ad6:	431a      	orrs	r2, r3
    RTC->DR = ((m_date->year % 100) / 10 << RTC_DR_YT_Pos) | ((m_date->year % 100) % 10 << RTC_DR_YU_Pos) |
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <rtc_set_date+0x124>)
 8000ada:	605a      	str	r2, [r3, #4]

	// ### CONFIG RTC_MODE 24 / 12 hours mode ###
	RTC->CR &= ~RTC_CR_FMT;
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <rtc_set_date+0x124>)
 8000ade:	689a      	ldr	r2, [r3, #8]
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <rtc_set_date+0x124>)
 8000ae2:	2140      	movs	r1, #64	; 0x40
 8000ae4:	438a      	bics	r2, r1
 8000ae6:	609a      	str	r2, [r3, #8]

	// ### EXIT INIT MODE ###
	RTC->ISR &= ~RTC_ISR_INIT;
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <rtc_set_date+0x124>)
 8000aea:	68da      	ldr	r2, [r3, #12]
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <rtc_set_date+0x124>)
 8000aee:	2180      	movs	r1, #128	; 0x80
 8000af0:	438a      	bics	r2, r1
 8000af2:	60da      	str	r2, [r3, #12]

	now = HAL_GetTick();
 8000af4:	f000 fbc0 	bl	8001278 <HAL_GetTick>
 8000af8:	0003      	movs	r3, r0
 8000afa:	60fb      	str	r3, [r7, #12]

	while (!(RTC->ISR & RTC_ISR_RSF))
 8000afc:	e009      	b.n	8000b12 <rtc_set_date+0x10a>
	{
    	if(HAL_GetTick() - now >= 10000)
 8000afe:	f000 fbbb 	bl	8001278 <HAL_GetTick>
 8000b02:	0002      	movs	r2, r0
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <rtc_set_date+0x128>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d901      	bls.n	8000b12 <rtc_set_date+0x10a>
    	{
    		return RTC_ERROR;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e007      	b.n	8000b22 <rtc_set_date+0x11a>
	while (!(RTC->ISR & RTC_ISR_RSF))
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <rtc_set_date+0x124>)
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	2220      	movs	r2, #32
 8000b18:	4013      	ands	r3, r2
 8000b1a:	d0f0      	beq.n	8000afe <rtc_set_date+0xf6>
    	}
	}

	// ### DISABLE WRITE ACCESS ###
	rtc_enable_protection();
 8000b1c:	f000 faa8 	bl	8001070 <rtc_enable_protection>

	return RTC_OK;
 8000b20:	2301      	movs	r3, #1
}
 8000b22:	0018      	movs	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b005      	add	sp, #20
 8000b28:	bd90      	pop	{r4, r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	40002800 	.word	0x40002800
 8000b30:	0000270f 	.word	0x0000270f

08000b34 <rtc_get_date>:


RTC_Status_t rtc_get_date(RTC_Date_t *m_date)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	uint32_t dr = RTC->DR;
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <rtc_get_date+0x94>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	60fb      	str	r3, [r7, #12]
	m_date->year = ((dr & RTC_DR_YT_Msk) >> RTC_DR_YT_Pos) * 10 + ((dr & RTC_DR_YU_Msk) >> RTC_DR_YU_Pos);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	0d1b      	lsrs	r3, r3, #20
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	220f      	movs	r2, #15
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	1c1a      	adds	r2, r3, #0
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	18d3      	adds	r3, r2, r3
 8000b54:	18db      	adds	r3, r3, r3
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	0c1b      	lsrs	r3, r3, #16
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	210f      	movs	r1, #15
 8000b60:	400b      	ands	r3, r1
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	18d3      	adds	r3, r2, r3
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	701a      	strb	r2, [r3, #0]
	m_date->month = ((dr & RTC_DR_MT_Msk) >> RTC_DR_MT_Pos) * 10 + ((dr & RTC_DR_MU_Msk) >> RTC_DR_MU_Pos);
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	0b1b      	lsrs	r3, r3, #12
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2201      	movs	r2, #1
 8000b74:	4013      	ands	r3, r2
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	1c1a      	adds	r2, r3, #0
 8000b7a:	0092      	lsls	r2, r2, #2
 8000b7c:	18d3      	adds	r3, r2, r3
 8000b7e:	18db      	adds	r3, r3, r3
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	210f      	movs	r1, #15
 8000b8a:	400b      	ands	r3, r1
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	18d3      	adds	r3, r2, r3
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	705a      	strb	r2, [r3, #1]
	m_date->day = ((dr & RTC_DR_DT_Msk) >> RTC_DR_DT_Pos) * 10 + ((dr & RTC_DR_DU_Msk) >> RTC_DR_DU_Pos);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	091b      	lsrs	r3, r3, #4
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	1c1a      	adds	r2, r3, #0
 8000ba4:	0092      	lsls	r2, r2, #2
 8000ba6:	18d3      	adds	r3, r2, r3
 8000ba8:	18db      	adds	r3, r3, r3
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	400b      	ands	r3, r1
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	18d3      	adds	r3, r2, r3
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	709a      	strb	r2, [r3, #2]
	return RTC_OK;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b004      	add	sp, #16
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40002800 	.word	0x40002800

08000bcc <rtc_bind_time_alarm>:


RTC_Status_t rtc_bind_time_alarm(RTC_Time_t *m_time,
		RTC_Alarm_t alarm_type)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b087      	sub	sp, #28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	000a      	movs	r2, r1
 8000bd6:	1cfb      	adds	r3, r7, #3
 8000bd8:	701a      	strb	r2, [r3, #0]
	uint32_t now = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
	uint8_t crc = m_time->hours + m_time->minutes + m_time->seconds;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	781a      	ldrb	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	785b      	ldrb	r3, [r3, #1]
 8000be6:	18d3      	adds	r3, r2, r3
 8000be8:	b2d9      	uxtb	r1, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	789a      	ldrb	r2, [r3, #2]
 8000bee:	230f      	movs	r3, #15
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	188a      	adds	r2, r1, r2
 8000bf4:	701a      	strb	r2, [r3, #0]
	uint32_t _bcd_alarm_time = (RTC_ALRMAR_MSK4 | (m_time->hours / 10 << RTC_ALRMAR_HT_Pos) | (m_time->hours % 10 << RTC_ALRMAR_HU_Pos) |
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	210a      	movs	r1, #10
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff fa83 	bl	8000108 <__udivsi3>
 8000c02:	0003      	movs	r3, r0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	051b      	lsls	r3, r3, #20
 8000c08:	001c      	movs	r4, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	210a      	movs	r1, #10
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff faff 	bl	8000214 <__aeabi_uidivmod>
 8000c16:	000b      	movs	r3, r1
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	041b      	lsls	r3, r3, #16
 8000c1c:	431c      	orrs	r4, r3
			   (m_time->minutes / 10 << RTC_ALRMAR_MNT_Pos) | (m_time->minutes % 10 << RTC_ALRMAR_MNU_Pos) |
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	785b      	ldrb	r3, [r3, #1]
 8000c22:	210a      	movs	r1, #10
 8000c24:	0018      	movs	r0, r3
 8000c26:	f7ff fa6f 	bl	8000108 <__udivsi3>
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	031b      	lsls	r3, r3, #12
	uint32_t _bcd_alarm_time = (RTC_ALRMAR_MSK4 | (m_time->hours / 10 << RTC_ALRMAR_HT_Pos) | (m_time->hours % 10 << RTC_ALRMAR_HU_Pos) |
 8000c30:	431c      	orrs	r4, r3
			   (m_time->minutes / 10 << RTC_ALRMAR_MNT_Pos) | (m_time->minutes % 10 << RTC_ALRMAR_MNU_Pos) |
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	785b      	ldrb	r3, [r3, #1]
 8000c36:	210a      	movs	r1, #10
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f7ff faeb 	bl	8000214 <__aeabi_uidivmod>
 8000c3e:	000b      	movs	r3, r1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	021b      	lsls	r3, r3, #8
 8000c44:	431c      	orrs	r4, r3
			   (m_time->seconds / 10 << RTC_ALRMAR_ST_Pos) | (m_time->seconds % 10 << RTC_ALRMAR_SU_Pos));
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	789b      	ldrb	r3, [r3, #2]
 8000c4a:	210a      	movs	r1, #10
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff fa5b 	bl	8000108 <__udivsi3>
 8000c52:	0003      	movs	r3, r0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	011b      	lsls	r3, r3, #4
			   (m_time->minutes / 10 << RTC_ALRMAR_MNT_Pos) | (m_time->minutes % 10 << RTC_ALRMAR_MNU_Pos) |
 8000c58:	431c      	orrs	r4, r3
			   (m_time->seconds / 10 << RTC_ALRMAR_ST_Pos) | (m_time->seconds % 10 << RTC_ALRMAR_SU_Pos));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	789b      	ldrb	r3, [r3, #2]
 8000c5e:	210a      	movs	r1, #10
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff fad7 	bl	8000214 <__aeabi_uidivmod>
 8000c66:	000b      	movs	r3, r1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	4323      	orrs	r3, r4
	uint32_t _bcd_alarm_time = (RTC_ALRMAR_MSK4 | (m_time->hours / 10 << RTC_ALRMAR_HT_Pos) | (m_time->hours % 10 << RTC_ALRMAR_HU_Pos) |
 8000c6c:	2280      	movs	r2, #128	; 0x80
 8000c6e:	0612      	lsls	r2, r2, #24
 8000c70:	4313      	orrs	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]

	uint8_t _hours = 0, _minutes = 0, _seconds = 0;
 8000c74:	2317      	movs	r3, #23
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	2316      	movs	r3, #22
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	2315      	movs	r3, #21
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]

	rtc_disable_protection();
 8000c8c:	f000 f9e2 	bl	8001054 <rtc_disable_protection>

	switch(alarm_type)
 8000c90:	1cfb      	adds	r3, r7, #3
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d002      	beq.n	8000c9e <rtc_bind_time_alarm+0xd2>
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d071      	beq.n	8000d80 <rtc_bind_time_alarm+0x1b4>
 8000c9c:	e0e1      	b.n	8000e62 <rtc_bind_time_alarm+0x296>
	{
	case ALARM_A: // ALARM A CONFIGURATION
		// ### DISABLE ALARM A ###
		RTC->CR &= ~RTC_CR_ALRAE;
 8000c9e:	4b7d      	ldr	r3, [pc, #500]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	4b7c      	ldr	r3, [pc, #496]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000ca4:	497c      	ldr	r1, [pc, #496]	; (8000e98 <rtc_bind_time_alarm+0x2cc>)
 8000ca6:	400a      	ands	r2, r1
 8000ca8:	609a      	str	r2, [r3, #8]

		// ### CHECK IF ALRMAR REGISTER CAN BE ACCESSED
		now = HAL_GetTick();
 8000caa:	f000 fae5 	bl	8001278 <HAL_GetTick>
 8000cae:	0003      	movs	r3, r0
 8000cb0:	613b      	str	r3, [r7, #16]

		while(!(RTC->ISR & RTC_ISR_ALRAWF))
 8000cb2:	e00a      	b.n	8000cca <rtc_bind_time_alarm+0xfe>
		{
			if(HAL_GetTick() - now >= 1000)
 8000cb4:	f000 fae0 	bl	8001278 <HAL_GetTick>
 8000cb8:	0002      	movs	r2, r0
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	1ad2      	subs	r2, r2, r3
 8000cbe:	23fa      	movs	r3, #250	; 0xfa
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d301      	bcc.n	8000cca <rtc_bind_time_alarm+0xfe>
			{
				return RTC_ERROR;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e0e0      	b.n	8000e8c <rtc_bind_time_alarm+0x2c0>
		while(!(RTC->ISR & RTC_ISR_ALRAWF))
 8000cca:	4b72      	ldr	r3, [pc, #456]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	d0ef      	beq.n	8000cb4 <rtc_bind_time_alarm+0xe8>
			}
		}

		// ### SET ALARM TIME ###
		RTC->ALRMAR = _bcd_alarm_time;
 8000cd4:	4b6f      	ldr	r3, [pc, #444]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	61da      	str	r2, [r3, #28]

		// ### ENABLE RTC ALARM A ###
		RTC->CR |= RTC_CR_ALRAE;
 8000cda:	4b6e      	ldr	r3, [pc, #440]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	4b6d      	ldr	r3, [pc, #436]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000ce0:	2180      	movs	r1, #128	; 0x80
 8000ce2:	0049      	lsls	r1, r1, #1
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	609a      	str	r2, [r3, #8]

		// ### ENABLE RTC ALARM A INTERRUPT ###
		RTC->CR |= RTC_CR_ALRAIE;
 8000ce8:	4b6a      	ldr	r3, [pc, #424]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	4b69      	ldr	r3, [pc, #420]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000cee:	2180      	movs	r1, #128	; 0x80
 8000cf0:	0149      	lsls	r1, r1, #5
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	609a      	str	r2, [r3, #8]

		_hours = ((RTC->ALRMAR & RTC_ALRMAR_HT_Msk) >> RTC_ALRMAR_HT_Pos) * 10 +
 8000cf6:	4b67      	ldr	r3, [pc, #412]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	0d1b      	lsrs	r3, r3, #20
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2203      	movs	r2, #3
 8000d00:	4013      	ands	r3, r2
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	1c1a      	adds	r2, r3, #0
 8000d06:	0092      	lsls	r2, r2, #2
 8000d08:	18d3      	adds	r3, r2, r3
 8000d0a:	18db      	adds	r3, r3, r3
 8000d0c:	b2d9      	uxtb	r1, r3
			 ((RTC->ALRMAR & RTC_ALRMAR_HU_Msk) >> RTC_ALRMAR_HU_Pos);
 8000d0e:	4b61      	ldr	r3, [pc, #388]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	0c1b      	lsrs	r3, r3, #16
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	220f      	movs	r2, #15
 8000d18:	4013      	ands	r3, r2
 8000d1a:	b2da      	uxtb	r2, r3
		_hours = ((RTC->ALRMAR & RTC_ALRMAR_HT_Msk) >> RTC_ALRMAR_HT_Pos) * 10 +
 8000d1c:	2317      	movs	r3, #23
 8000d1e:	18fb      	adds	r3, r7, r3
 8000d20:	188a      	adds	r2, r1, r2
 8000d22:	701a      	strb	r2, [r3, #0]
		_minutes = ((RTC->ALRMAR & RTC_ALRMAR_MNT_Msk) >> RTC_ALRMAR_MNT_Pos) * 10 +
 8000d24:	4b5b      	ldr	r3, [pc, #364]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	0b1b      	lsrs	r3, r3, #12
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	4013      	ands	r3, r2
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	1c1a      	adds	r2, r3, #0
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	18d3      	adds	r3, r2, r3
 8000d38:	18db      	adds	r3, r3, r3
 8000d3a:	b2d9      	uxtb	r1, r3
			   ((RTC->ALRMAR & RTC_ALRMAR_MNU_Msk) >> RTC_ALRMAR_MNU_Pos);
 8000d3c:	4b55      	ldr	r3, [pc, #340]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	220f      	movs	r2, #15
 8000d46:	4013      	ands	r3, r2
 8000d48:	b2da      	uxtb	r2, r3
		_minutes = ((RTC->ALRMAR & RTC_ALRMAR_MNT_Msk) >> RTC_ALRMAR_MNT_Pos) * 10 +
 8000d4a:	2316      	movs	r3, #22
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	188a      	adds	r2, r1, r2
 8000d50:	701a      	strb	r2, [r3, #0]
		_seconds = ((RTC->ALRMAR & RTC_ALRMAR_ST_Msk) >> RTC_ALRMAR_ST_Pos) * 10 +
 8000d52:	4b50      	ldr	r3, [pc, #320]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	091b      	lsrs	r3, r3, #4
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	1c1a      	adds	r2, r3, #0
 8000d62:	0092      	lsls	r2, r2, #2
 8000d64:	18d3      	adds	r3, r2, r3
 8000d66:	18db      	adds	r3, r3, r3
 8000d68:	b2d9      	uxtb	r1, r3
			   ((RTC->ALRMAR & RTC_ALRMAR_SU_Msk) >> RTC_ALRMAR_SU_Pos);
 8000d6a:	4b4a      	ldr	r3, [pc, #296]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	220f      	movs	r2, #15
 8000d72:	4013      	ands	r3, r2
 8000d74:	b2da      	uxtb	r2, r3
		_seconds = ((RTC->ALRMAR & RTC_ALRMAR_ST_Msk) >> RTC_ALRMAR_ST_Pos) * 10 +
 8000d76:	2315      	movs	r3, #21
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	188a      	adds	r2, r1, r2
 8000d7c:	701a      	strb	r2, [r3, #0]

		break;
 8000d7e:	e070      	b.n	8000e62 <rtc_bind_time_alarm+0x296>

	case ALARM_B: // ALARM B CONFIGURATION
		// ### DISABLE ALARM B ###
		RTC->CR &= ~RTC_CR_ALRBE;
 8000d80:	4b44      	ldr	r3, [pc, #272]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	4b43      	ldr	r3, [pc, #268]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000d86:	4945      	ldr	r1, [pc, #276]	; (8000e9c <rtc_bind_time_alarm+0x2d0>)
 8000d88:	400a      	ands	r2, r1
 8000d8a:	609a      	str	r2, [r3, #8]

		// ### CHECK IF ALRMBR REGISTER CAN BE ACCESSED
		now = HAL_GetTick();
 8000d8c:	f000 fa74 	bl	8001278 <HAL_GetTick>
 8000d90:	0003      	movs	r3, r0
 8000d92:	613b      	str	r3, [r7, #16]

		while(!(RTC->ISR & RTC_ISR_ALRBWF))
 8000d94:	e00a      	b.n	8000dac <rtc_bind_time_alarm+0x1e0>
		{
			if(HAL_GetTick() - now >= 1000)
 8000d96:	f000 fa6f 	bl	8001278 <HAL_GetTick>
 8000d9a:	0002      	movs	r2, r0
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	1ad2      	subs	r2, r2, r3
 8000da0:	23fa      	movs	r3, #250	; 0xfa
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d301      	bcc.n	8000dac <rtc_bind_time_alarm+0x1e0>
			{
				return RTC_ERROR;
 8000da8:	2300      	movs	r3, #0
 8000daa:	e06f      	b.n	8000e8c <rtc_bind_time_alarm+0x2c0>
		while(!(RTC->ISR & RTC_ISR_ALRBWF))
 8000dac:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	2202      	movs	r2, #2
 8000db2:	4013      	ands	r3, r2
 8000db4:	d0ef      	beq.n	8000d96 <rtc_bind_time_alarm+0x1ca>
			}
		}

		// ### SET ALARM TIME ###
		RTC->ALRMBR = _bcd_alarm_time;
 8000db6:	4b37      	ldr	r3, [pc, #220]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	621a      	str	r2, [r3, #32]

		// ### ENABLE RTC ALARM B ###
		RTC->CR |= RTC_CR_ALRBE;
 8000dbc:	4b35      	ldr	r3, [pc, #212]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000dc2:	2180      	movs	r1, #128	; 0x80
 8000dc4:	0089      	lsls	r1, r1, #2
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	609a      	str	r2, [r3, #8]

		// ### ENABLE RTC ALARM B INTERRUPT ###
		RTC->CR |= RTC_CR_ALRBIE;
 8000dca:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	4b31      	ldr	r3, [pc, #196]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	0189      	lsls	r1, r1, #6
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	609a      	str	r2, [r3, #8]

		_hours = ((RTC->ALRMBR & RTC_ALRMBR_HT_Msk) >> RTC_ALRMBR_HT_Pos) * 10 +
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	0d1b      	lsrs	r3, r3, #20
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2203      	movs	r2, #3
 8000de2:	4013      	ands	r3, r2
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	1c1a      	adds	r2, r3, #0
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	18d3      	adds	r3, r2, r3
 8000dec:	18db      	adds	r3, r3, r3
 8000dee:	b2d9      	uxtb	r1, r3
			 ((RTC->ALRMBR & RTC_ALRMBR_HU_Msk) >> RTC_ALRMBR_HU_Pos);
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	0c1b      	lsrs	r3, r3, #16
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	220f      	movs	r2, #15
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	b2da      	uxtb	r2, r3
		_hours = ((RTC->ALRMBR & RTC_ALRMBR_HT_Msk) >> RTC_ALRMBR_HT_Pos) * 10 +
 8000dfe:	2317      	movs	r3, #23
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	188a      	adds	r2, r1, r2
 8000e04:	701a      	strb	r2, [r3, #0]
		_minutes = ((RTC->ALRMBR & RTC_ALRMBR_MNT_Msk) >> RTC_ALRMBR_MNT_Pos) * 10 +
 8000e06:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000e08:	6a1b      	ldr	r3, [r3, #32]
 8000e0a:	0b1b      	lsrs	r3, r3, #12
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2207      	movs	r2, #7
 8000e10:	4013      	ands	r3, r2
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	1c1a      	adds	r2, r3, #0
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	18d3      	adds	r3, r2, r3
 8000e1a:	18db      	adds	r3, r3, r3
 8000e1c:	b2d9      	uxtb	r1, r3
			   ((RTC->ALRMBR & RTC_ALRMBR_MNU_Msk) >> RTC_ALRMBR_MNU_Pos);
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000e20:	6a1b      	ldr	r3, [r3, #32]
 8000e22:	0a1b      	lsrs	r3, r3, #8
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	220f      	movs	r2, #15
 8000e28:	4013      	ands	r3, r2
 8000e2a:	b2da      	uxtb	r2, r3
		_minutes = ((RTC->ALRMBR & RTC_ALRMBR_MNT_Msk) >> RTC_ALRMBR_MNT_Pos) * 10 +
 8000e2c:	2316      	movs	r3, #22
 8000e2e:	18fb      	adds	r3, r7, r3
 8000e30:	188a      	adds	r2, r1, r2
 8000e32:	701a      	strb	r2, [r3, #0]
		_seconds = ((RTC->ALRMBR & RTC_ALRMBR_ST_Msk) >> RTC_ALRMBR_ST_Pos) * 10 +
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	091b      	lsrs	r3, r3, #4
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	4013      	ands	r3, r2
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	1c1a      	adds	r2, r3, #0
 8000e44:	0092      	lsls	r2, r2, #2
 8000e46:	18d3      	adds	r3, r2, r3
 8000e48:	18db      	adds	r3, r3, r3
 8000e4a:	b2d9      	uxtb	r1, r3
			   ((RTC->ALRMBR & RTC_ALRMBR_SU_Msk) >> RTC_ALRMBR_SU_Pos);
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <rtc_bind_time_alarm+0x2c8>)
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	220f      	movs	r2, #15
 8000e54:	4013      	ands	r3, r2
 8000e56:	b2da      	uxtb	r2, r3
		_seconds = ((RTC->ALRMBR & RTC_ALRMBR_ST_Msk) >> RTC_ALRMBR_ST_Pos) * 10 +
 8000e58:	2315      	movs	r3, #21
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	188a      	adds	r2, r1, r2
 8000e5e:	701a      	strb	r2, [r3, #0]
		break;
 8000e60:	46c0      	nop			; (mov r8, r8)
	}


	rtc_enable_protection();
 8000e62:	f000 f905 	bl	8001070 <rtc_enable_protection>

	if(_hours + _minutes + _seconds == crc)
 8000e66:	2317      	movs	r3, #23
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	2316      	movs	r3, #22
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	18d2      	adds	r2, r2, r3
 8000e74:	2315      	movs	r3, #21
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	18d2      	adds	r2, r2, r3
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d101      	bne.n	8000e8a <rtc_bind_time_alarm+0x2be>
	{
		return RTC_OK;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <rtc_bind_time_alarm+0x2c0>
	}
	else
	{
		return RTC_ERROR;
 8000e8a:	2300      	movs	r3, #0
	}
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b007      	add	sp, #28
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	40002800 	.word	0x40002800
 8000e98:	fffffeff 	.word	0xfffffeff
 8000e9c:	fffffdff 	.word	0xfffffdff

08000ea0 <rtc_alarm_interrupt_handler>:
	return RTC_OK;
}


void rtc_alarm_interrupt_handler(RTC_Alarm_t curr_alarm)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	0002      	movs	r2, r0
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	701a      	strb	r2, [r3, #0]
	switch(curr_alarm)
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <rtc_alarm_interrupt_handler+0x1a>
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d060      	beq.n	8000f7a <rtc_alarm_interrupt_handler+0xda>

			rtc_alarm_callback(&m_curr_time, ALARM_B);
		}
		break;
	}
}
 8000eb8:	e0c1      	b.n	800103e <rtc_alarm_interrupt_handler+0x19e>
		if ((RTC->ISR & RTC_ISR_ALRAF))
 8000eba:	4b63      	ldr	r3, [pc, #396]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d100      	bne.n	8000ec8 <rtc_alarm_interrupt_handler+0x28>
 8000ec6:	e0b7      	b.n	8001038 <rtc_alarm_interrupt_handler+0x198>
			RTC->ISR &= ~RTC_ISR_ALRAF;
 8000ec8:	4b5f      	ldr	r3, [pc, #380]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	4b5e      	ldr	r3, [pc, #376]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8000ece:	495f      	ldr	r1, [pc, #380]	; (800104c <rtc_alarm_interrupt_handler+0x1ac>)
 8000ed0:	400a      	ands	r2, r1
 8000ed2:	60da      	str	r2, [r3, #12]
			RTC_Time_t m_curr_time = {0};
 8000ed4:	240c      	movs	r4, #12
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	0018      	movs	r0, r3
 8000eda:	2303      	movs	r3, #3
 8000edc:	001a      	movs	r2, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f001 fa92 	bl	8002408 <memset>
			m_curr_time.hours = ((RTC->ALRMAR & RTC_ALRMAR_HT_Msk) >> RTC_ALRMAR_HT_Pos) * 10 +
 8000ee4:	4b58      	ldr	r3, [pc, #352]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8000ee6:	69db      	ldr	r3, [r3, #28]
 8000ee8:	0d1b      	lsrs	r3, r3, #20
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2203      	movs	r2, #3
 8000eee:	4013      	ands	r3, r2
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	1c1a      	adds	r2, r3, #0
 8000ef4:	0092      	lsls	r2, r2, #2
 8000ef6:	18d3      	adds	r3, r2, r3
 8000ef8:	18db      	adds	r3, r3, r3
 8000efa:	b2da      	uxtb	r2, r3
				 ((RTC->ALRMAR & RTC_ALRMAR_HU_Msk) >> RTC_ALRMAR_HU_Pos);
 8000efc:	4b52      	ldr	r3, [pc, #328]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	0c1b      	lsrs	r3, r3, #16
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	210f      	movs	r1, #15
 8000f06:	400b      	ands	r3, r1
 8000f08:	b2db      	uxtb	r3, r3
			m_curr_time.hours = ((RTC->ALRMAR & RTC_ALRMAR_HT_Msk) >> RTC_ALRMAR_HT_Pos) * 10 +
 8000f0a:	18d3      	adds	r3, r2, r3
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	0020      	movs	r0, r4
 8000f10:	183b      	adds	r3, r7, r0
 8000f12:	701a      	strb	r2, [r3, #0]
			m_curr_time.minutes = ((RTC->ALRMAR & RTC_ALRMAR_MNT_Msk) >> RTC_ALRMAR_MNT_Pos) * 10 +
 8000f14:	4b4c      	ldr	r3, [pc, #304]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8000f16:	69db      	ldr	r3, [r3, #28]
 8000f18:	0b1b      	lsrs	r3, r3, #12
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2207      	movs	r2, #7
 8000f1e:	4013      	ands	r3, r2
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	1c1a      	adds	r2, r3, #0
 8000f24:	0092      	lsls	r2, r2, #2
 8000f26:	18d3      	adds	r3, r2, r3
 8000f28:	18db      	adds	r3, r3, r3
 8000f2a:	b2da      	uxtb	r2, r3
				   ((RTC->ALRMAR & RTC_ALRMAR_MNU_Msk) >> RTC_ALRMAR_MNU_Pos);
 8000f2c:	4b46      	ldr	r3, [pc, #280]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	210f      	movs	r1, #15
 8000f36:	400b      	ands	r3, r1
 8000f38:	b2db      	uxtb	r3, r3
			m_curr_time.minutes = ((RTC->ALRMAR & RTC_ALRMAR_MNT_Msk) >> RTC_ALRMAR_MNT_Pos) * 10 +
 8000f3a:	18d3      	adds	r3, r2, r3
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	183b      	adds	r3, r7, r0
 8000f40:	705a      	strb	r2, [r3, #1]
			m_curr_time.seconds = ((RTC->ALRMAR & RTC_ALRMAR_ST_Msk) >> RTC_ALRMAR_ST_Pos) * 10 +
 8000f42:	4b41      	ldr	r3, [pc, #260]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	1c1a      	adds	r2, r3, #0
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	18d3      	adds	r3, r2, r3
 8000f56:	18db      	adds	r3, r3, r3
 8000f58:	b2da      	uxtb	r2, r3
				   ((RTC->ALRMAR & RTC_ALRMAR_SU_Msk) >> RTC_ALRMAR_SU_Pos);
 8000f5a:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	210f      	movs	r1, #15
 8000f62:	400b      	ands	r3, r1
 8000f64:	b2db      	uxtb	r3, r3
			m_curr_time.seconds = ((RTC->ALRMAR & RTC_ALRMAR_ST_Msk) >> RTC_ALRMAR_ST_Pos) * 10 +
 8000f66:	18d3      	adds	r3, r2, r3
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	183b      	adds	r3, r7, r0
 8000f6c:	709a      	strb	r2, [r3, #2]
			rtc_alarm_callback(&m_curr_time, ALARM_A);
 8000f6e:	183b      	adds	r3, r7, r0
 8000f70:	2100      	movs	r1, #0
 8000f72:	0018      	movs	r0, r3
 8000f74:	e000      	b.n	8000f78 <rtc_alarm_interrupt_handler+0xd8>
 8000f76:	bf00      	nop
		break;
 8000f78:	e05e      	b.n	8001038 <rtc_alarm_interrupt_handler+0x198>
		if ((RTC->ISR & RTC_ISR_ALRBF))
 8000f7a:	4b33      	ldr	r3, [pc, #204]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4013      	ands	r3, r2
 8000f84:	d05a      	beq.n	800103c <rtc_alarm_interrupt_handler+0x19c>
			RTC->ISR &= ~RTC_ISR_ALRBF;
 8000f86:	4b30      	ldr	r3, [pc, #192]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8000f8c:	4930      	ldr	r1, [pc, #192]	; (8001050 <rtc_alarm_interrupt_handler+0x1b0>)
 8000f8e:	400a      	ands	r2, r1
 8000f90:	60da      	str	r2, [r3, #12]
			RTC_Time_t m_curr_time = {0};
 8000f92:	2408      	movs	r4, #8
 8000f94:	193b      	adds	r3, r7, r4
 8000f96:	0018      	movs	r0, r3
 8000f98:	2303      	movs	r3, #3
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	f001 fa33 	bl	8002408 <memset>
			m_curr_time.hours = ((RTC->ALRMBR & RTC_ALRMBR_HT_Msk) >> RTC_ALRMBR_HT_Pos) * 10 +
 8000fa2:	4b29      	ldr	r3, [pc, #164]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	0d1b      	lsrs	r3, r3, #20
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2203      	movs	r2, #3
 8000fac:	4013      	ands	r3, r2
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	1c1a      	adds	r2, r3, #0
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	18d3      	adds	r3, r2, r3
 8000fb6:	18db      	adds	r3, r3, r3
 8000fb8:	b2da      	uxtb	r2, r3
				 ((RTC->ALRMBR & RTC_ALRMBR_HU_Msk) >> RTC_ALRMBR_HU_Pos);
 8000fba:	4b23      	ldr	r3, [pc, #140]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	0c1b      	lsrs	r3, r3, #16
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	b2db      	uxtb	r3, r3
			m_curr_time.hours = ((RTC->ALRMBR & RTC_ALRMBR_HT_Msk) >> RTC_ALRMBR_HT_Pos) * 10 +
 8000fc8:	18d3      	adds	r3, r2, r3
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	0020      	movs	r0, r4
 8000fce:	183b      	adds	r3, r7, r0
 8000fd0:	701a      	strb	r2, [r3, #0]
			m_curr_time.minutes = ((RTC->ALRMBR & RTC_ALRMBR_MNT_Msk) >> RTC_ALRMBR_MNT_Pos) * 10 +
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	0b1b      	lsrs	r3, r3, #12
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2207      	movs	r2, #7
 8000fdc:	4013      	ands	r3, r2
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	1c1a      	adds	r2, r3, #0
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	18d3      	adds	r3, r2, r3
 8000fe6:	18db      	adds	r3, r3, r3
 8000fe8:	b2da      	uxtb	r2, r3
				   ((RTC->ALRMBR & RTC_ALRMBR_MNU_Msk) >> RTC_ALRMBR_MNU_Pos);
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	0a1b      	lsrs	r3, r3, #8
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	400b      	ands	r3, r1
 8000ff6:	b2db      	uxtb	r3, r3
			m_curr_time.minutes = ((RTC->ALRMBR & RTC_ALRMBR_MNT_Msk) >> RTC_ALRMBR_MNT_Pos) * 10 +
 8000ff8:	18d3      	adds	r3, r2, r3
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	183b      	adds	r3, r7, r0
 8000ffe:	705a      	strb	r2, [r3, #1]
			m_curr_time.seconds = ((RTC->ALRMBR & RTC_ALRMBR_ST_Msk) >> RTC_ALRMBR_ST_Pos) * 10 +
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	091b      	lsrs	r3, r3, #4
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2207      	movs	r2, #7
 800100a:	4013      	ands	r3, r2
 800100c:	b2db      	uxtb	r3, r3
 800100e:	1c1a      	adds	r2, r3, #0
 8001010:	0092      	lsls	r2, r2, #2
 8001012:	18d3      	adds	r3, r2, r3
 8001014:	18db      	adds	r3, r3, r3
 8001016:	b2da      	uxtb	r2, r3
				   ((RTC->ALRMBR & RTC_ALRMBR_SU_Msk) >> RTC_ALRMBR_SU_Pos);
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <rtc_alarm_interrupt_handler+0x1a8>)
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	210f      	movs	r1, #15
 8001020:	400b      	ands	r3, r1
 8001022:	b2db      	uxtb	r3, r3
			m_curr_time.seconds = ((RTC->ALRMBR & RTC_ALRMBR_ST_Msk) >> RTC_ALRMBR_ST_Pos) * 10 +
 8001024:	18d3      	adds	r3, r2, r3
 8001026:	b2da      	uxtb	r2, r3
 8001028:	183b      	adds	r3, r7, r0
 800102a:	709a      	strb	r2, [r3, #2]
			rtc_alarm_callback(&m_curr_time, ALARM_B);
 800102c:	183b      	adds	r3, r7, r0
 800102e:	2101      	movs	r1, #1
 8001030:	0018      	movs	r0, r3
 8001032:	e000      	b.n	8001036 <rtc_alarm_interrupt_handler+0x196>
 8001034:	bf00      	nop
		break;
 8001036:	e001      	b.n	800103c <rtc_alarm_interrupt_handler+0x19c>
		break;
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	e000      	b.n	800103e <rtc_alarm_interrupt_handler+0x19e>
		break;
 800103c:	46c0      	nop			; (mov r8, r8)
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b005      	add	sp, #20
 8001044:	bd90      	pop	{r4, r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	40002800 	.word	0x40002800
 800104c:	fffffeff 	.word	0xfffffeff
 8001050:	fffffdff 	.word	0xfffffdff

08001054 <rtc_disable_protection>:

}

// ### PRIVATE FUNCTIONS DECLORATION ###
void rtc_disable_protection(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	RTC->WPR = 0xCA;
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <rtc_disable_protection+0x18>)
 800105a:	22ca      	movs	r2, #202	; 0xca
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
	RTC->WPR = 0x53;
 800105e:	4b03      	ldr	r3, [pc, #12]	; (800106c <rtc_disable_protection+0x18>)
 8001060:	2253      	movs	r2, #83	; 0x53
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	40002800 	.word	0x40002800

08001070 <rtc_enable_protection>:


void rtc_enable_protection(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
    RTC->WPR = 0xFF;
 8001074:	4b02      	ldr	r3, [pc, #8]	; (8001080 <rtc_enable_protection+0x10>)
 8001076:	22ff      	movs	r2, #255	; 0xff
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40002800 	.word	0x40002800

08001084 <bcd_to_dec>:
  return  ((uint8_t)(bcdhigh << 4) | byte);
}


uint8_t bcd_to_dec(uint8_t bcd)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	0002      	movs	r2, r0
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	701a      	strb	r2, [r3, #0]
  uint8_t tmp = 0;
 8001090:	200f      	movs	r0, #15
 8001092:	183b      	adds	r3, r7, r0
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]

  tmp = ((uint8_t)(bcd & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	091b      	lsrs	r3, r3, #4
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	183a      	adds	r2, r7, r0
 80010a2:	1c19      	adds	r1, r3, #0
 80010a4:	0089      	lsls	r1, r1, #2
 80010a6:	18cb      	adds	r3, r1, r3
 80010a8:	18db      	adds	r3, r3, r3
 80010aa:	7013      	strb	r3, [r2, #0]

  return (tmp + (bcd & (uint8_t)0x0F));
 80010ac:	1dfb      	adds	r3, r7, #7
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	220f      	movs	r2, #15
 80010b2:	4013      	ands	r3, r2
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	183b      	adds	r3, r7, r0
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	18d3      	adds	r3, r2, r3
 80010bc:	b2db      	uxtb	r3, r3
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b004      	add	sp, #16
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <errno_handler>:
#include "myMain.h"

void errno_handler(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
	while(1);
 80010ca:	e7fe      	b.n	80010ca <errno_handler+0x4>

080010cc <myMain>:
}

void myMain(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
	RTC_Time_t time_set = {
 80010d2:	2314      	movs	r3, #20
 80010d4:	18fb      	adds	r3, r7, r3
 80010d6:	4a31      	ldr	r2, [pc, #196]	; (800119c <myMain+0xd0>)
 80010d8:	8811      	ldrh	r1, [r2, #0]
 80010da:	8019      	strh	r1, [r3, #0]
 80010dc:	7892      	ldrb	r2, [r2, #2]
 80010de:	709a      	strb	r2, [r3, #2]
			.hours = 15,
			.minutes = 7,
			.seconds = 0
	};

	RTC_Time_t time_get = {0};
 80010e0:	2310      	movs	r3, #16
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	0018      	movs	r0, r3
 80010e6:	2303      	movs	r3, #3
 80010e8:	001a      	movs	r2, r3
 80010ea:	2100      	movs	r1, #0
 80010ec:	f001 f98c 	bl	8002408 <memset>
	RTC_Date_t date_set = {
 80010f0:	230c      	movs	r3, #12
 80010f2:	18fb      	adds	r3, r7, r3
 80010f4:	4a2a      	ldr	r2, [pc, #168]	; (80011a0 <myMain+0xd4>)
 80010f6:	8811      	ldrh	r1, [r2, #0]
 80010f8:	8019      	strh	r1, [r3, #0]
 80010fa:	7892      	ldrb	r2, [r2, #2]
 80010fc:	709a      	strb	r2, [r3, #2]
			.day = 22,
			.month = 11,
			.year = 24
	};
	RTC_Date_t date_get = {0};
 80010fe:	2308      	movs	r3, #8
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	0018      	movs	r0, r3
 8001104:	2303      	movs	r3, #3
 8001106:	001a      	movs	r2, r3
 8001108:	2100      	movs	r1, #0
 800110a:	f001 f97d 	bl	8002408 <memset>

	RTC_Time_t alarm_time = {
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	4a24      	ldr	r2, [pc, #144]	; (80011a4 <myMain+0xd8>)
 8001112:	8811      	ldrh	r1, [r2, #0]
 8001114:	8019      	strh	r1, [r3, #0]
 8001116:	7892      	ldrb	r2, [r2, #2]
 8001118:	709a      	strb	r2, [r3, #2]
		.hours = 15,
		.minutes = 8,
		.seconds = 0
	};

	if(!rtc_init_clock())
 800111a:	f7ff fb0d 	bl	8000738 <rtc_init_clock>
 800111e:	1e03      	subs	r3, r0, #0
 8001120:	d101      	bne.n	8001126 <myMain+0x5a>
	{
		errno_handler();
 8001122:	f7ff ffd0 	bl	80010c6 <errno_handler>
	}

	if(!rtc_start_clock())
 8001126:	f7ff fb87 	bl	8000838 <rtc_start_clock>
 800112a:	1e03      	subs	r3, r0, #0
 800112c:	d101      	bne.n	8001132 <myMain+0x66>
	{
		errno_handler();
 800112e:	f7ff ffca 	bl	80010c6 <errno_handler>
	}

	if(!rtc_set_time(&time_set))
 8001132:	2314      	movs	r3, #20
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	0018      	movs	r0, r3
 8001138:	f7ff fba8 	bl	800088c <rtc_set_time>
 800113c:	1e03      	subs	r3, r0, #0
 800113e:	d101      	bne.n	8001144 <myMain+0x78>
	{
		errno_handler();
 8001140:	f7ff ffc1 	bl	80010c6 <errno_handler>
	}

	if(!rtc_set_date(&date_set))
 8001144:	230c      	movs	r3, #12
 8001146:	18fb      	adds	r3, r7, r3
 8001148:	0018      	movs	r0, r3
 800114a:	f7ff fc5d 	bl	8000a08 <rtc_set_date>
 800114e:	1e03      	subs	r3, r0, #0
 8001150:	d101      	bne.n	8001156 <myMain+0x8a>
	{
		errno_handler();
 8001152:	f7ff ffb8 	bl	80010c6 <errno_handler>
	}

	HAL_Delay(5000);
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <myMain+0xdc>)
 8001158:	0018      	movs	r0, r3
 800115a:	f000 f897 	bl	800128c <HAL_Delay>

	if(!rtc_get_time(&time_get))
 800115e:	2310      	movs	r3, #16
 8001160:	18fb      	adds	r3, r7, r3
 8001162:	0018      	movs	r0, r3
 8001164:	f7ff fc1c 	bl	80009a0 <rtc_get_time>
 8001168:	1e03      	subs	r3, r0, #0
 800116a:	d101      	bne.n	8001170 <myMain+0xa4>
	{
		errno_handler();
 800116c:	f7ff ffab 	bl	80010c6 <errno_handler>
	}

	if(!rtc_get_date(&date_get))
 8001170:	2308      	movs	r3, #8
 8001172:	18fb      	adds	r3, r7, r3
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff fcdd 	bl	8000b34 <rtc_get_date>
 800117a:	1e03      	subs	r3, r0, #0
 800117c:	d101      	bne.n	8001182 <myMain+0xb6>
	{
		errno_handler();
 800117e:	f7ff ffa2 	bl	80010c6 <errno_handler>
	}

	if(!rtc_bind_time_alarm(&alarm_time, ALARM_B))
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2101      	movs	r1, #1
 8001186:	0018      	movs	r0, r3
 8001188:	f7ff fd20 	bl	8000bcc <rtc_bind_time_alarm>
 800118c:	1e03      	subs	r3, r0, #0
 800118e:	d101      	bne.n	8001194 <myMain+0xc8>
	{
		errno_handler();
 8001190:	f7ff ff99 	bl	80010c6 <errno_handler>
	}

	for(;;)
	{
		rtc_alarm_interrupt_handler(ALARM_B);
 8001194:	2001      	movs	r0, #1
 8001196:	f7ff fe83 	bl	8000ea0 <rtc_alarm_interrupt_handler>
 800119a:	e7fb      	b.n	8001194 <myMain+0xc8>
 800119c:	08002478 	.word	0x08002478
 80011a0:	0800247c 	.word	0x0800247c
 80011a4:	08002480 	.word	0x08002480
 80011a8:	00001388 	.word	0x00001388

080011ac <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_Init+0x3c>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_Init+0x3c>)
 80011be:	2140      	movs	r1, #64	; 0x40
 80011c0:	430a      	orrs	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c4:	2003      	movs	r0, #3
 80011c6:	f000 f811 	bl	80011ec <HAL_InitTick>
 80011ca:	1e03      	subs	r3, r0, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	e001      	b.n	80011da <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011d6:	f7ff fa3d 	bl	8000654 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	781b      	ldrb	r3, [r3, #0]
}
 80011de:	0018      	movs	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	40022000 	.word	0x40022000

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_InitTick+0x5c>)
 80011f6:	681c      	ldr	r4, [r3, #0]
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <HAL_InitTick+0x60>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	0019      	movs	r1, r3
 80011fe:	23fa      	movs	r3, #250	; 0xfa
 8001200:	0098      	lsls	r0, r3, #2
 8001202:	f7fe ff81 	bl	8000108 <__udivsi3>
 8001206:	0003      	movs	r3, r0
 8001208:	0019      	movs	r1, r3
 800120a:	0020      	movs	r0, r4
 800120c:	f7fe ff7c 	bl	8000108 <__udivsi3>
 8001210:	0003      	movs	r3, r0
 8001212:	0018      	movs	r0, r3
 8001214:	f000 f905 	bl	8001422 <HAL_SYSTICK_Config>
 8001218:	1e03      	subs	r3, r0, #0
 800121a:	d001      	beq.n	8001220 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e00f      	b.n	8001240 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b03      	cmp	r3, #3
 8001224:	d80b      	bhi.n	800123e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	2301      	movs	r3, #1
 800122a:	425b      	negs	r3, r3
 800122c:	2200      	movs	r2, #0
 800122e:	0018      	movs	r0, r3
 8001230:	f000 f8e2 	bl	80013f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_InitTick+0x64>)
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	0018      	movs	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	b003      	add	sp, #12
 8001246:	bd90      	pop	{r4, r7, pc}
 8001248:	20000000 	.word	0x20000000
 800124c:	20000008 	.word	0x20000008
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <HAL_IncTick+0x1c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	001a      	movs	r2, r3
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_IncTick+0x20>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	18d2      	adds	r2, r2, r3
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_IncTick+0x20>)
 8001266:	601a      	str	r2, [r3, #0]
}
 8001268:	46c0      	nop			; (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	20000008 	.word	0x20000008
 8001274:	2000004c 	.word	0x2000004c

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b02      	ldr	r3, [pc, #8]	; (8001288 <HAL_GetTick+0x10>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	0018      	movs	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	2000004c 	.word	0x2000004c

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff fff0 	bl	8001278 <HAL_GetTick>
 8001298:	0003      	movs	r3, r0
 800129a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3301      	adds	r3, #1
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_Delay+0x44>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	001a      	movs	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	189b      	adds	r3, r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	f7ff ffe0 	bl	8001278 <HAL_GetTick>
 80012b8:	0002      	movs	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b004      	add	sp, #16
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	20000008 	.word	0x20000008

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	0002      	movs	r2, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b7f      	cmp	r3, #127	; 0x7f
 80012e8:	d828      	bhi.n	800133c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ea:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <__NVIC_SetPriority+0xd4>)
 80012ec:	1dfb      	adds	r3, r7, #7
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	089b      	lsrs	r3, r3, #2
 80012f4:	33c0      	adds	r3, #192	; 0xc0
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	589b      	ldr	r3, [r3, r2]
 80012fa:	1dfa      	adds	r2, r7, #7
 80012fc:	7812      	ldrb	r2, [r2, #0]
 80012fe:	0011      	movs	r1, r2
 8001300:	2203      	movs	r2, #3
 8001302:	400a      	ands	r2, r1
 8001304:	00d2      	lsls	r2, r2, #3
 8001306:	21ff      	movs	r1, #255	; 0xff
 8001308:	4091      	lsls	r1, r2
 800130a:	000a      	movs	r2, r1
 800130c:	43d2      	mvns	r2, r2
 800130e:	401a      	ands	r2, r3
 8001310:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	019b      	lsls	r3, r3, #6
 8001316:	22ff      	movs	r2, #255	; 0xff
 8001318:	401a      	ands	r2, r3
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	0018      	movs	r0, r3
 8001320:	2303      	movs	r3, #3
 8001322:	4003      	ands	r3, r0
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001328:	481f      	ldr	r0, [pc, #124]	; (80013a8 <__NVIC_SetPriority+0xd4>)
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b25b      	sxtb	r3, r3
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	430a      	orrs	r2, r1
 8001334:	33c0      	adds	r3, #192	; 0xc0
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800133a:	e031      	b.n	80013a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800133c:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <__NVIC_SetPriority+0xd8>)
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	0019      	movs	r1, r3
 8001344:	230f      	movs	r3, #15
 8001346:	400b      	ands	r3, r1
 8001348:	3b08      	subs	r3, #8
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	3306      	adds	r3, #6
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	18d3      	adds	r3, r2, r3
 8001352:	3304      	adds	r3, #4
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	1dfa      	adds	r2, r7, #7
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	0011      	movs	r1, r2
 800135c:	2203      	movs	r2, #3
 800135e:	400a      	ands	r2, r1
 8001360:	00d2      	lsls	r2, r2, #3
 8001362:	21ff      	movs	r1, #255	; 0xff
 8001364:	4091      	lsls	r1, r2
 8001366:	000a      	movs	r2, r1
 8001368:	43d2      	mvns	r2, r2
 800136a:	401a      	ands	r2, r3
 800136c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	019b      	lsls	r3, r3, #6
 8001372:	22ff      	movs	r2, #255	; 0xff
 8001374:	401a      	ands	r2, r3
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	0018      	movs	r0, r3
 800137c:	2303      	movs	r3, #3
 800137e:	4003      	ands	r3, r0
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001384:	4809      	ldr	r0, [pc, #36]	; (80013ac <__NVIC_SetPriority+0xd8>)
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	001c      	movs	r4, r3
 800138c:	230f      	movs	r3, #15
 800138e:	4023      	ands	r3, r4
 8001390:	3b08      	subs	r3, #8
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	430a      	orrs	r2, r1
 8001396:	3306      	adds	r3, #6
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	18c3      	adds	r3, r0, r3
 800139c:	3304      	adds	r3, #4
 800139e:	601a      	str	r2, [r3, #0]
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b003      	add	sp, #12
 80013a6:	bd90      	pop	{r4, r7, pc}
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	1e5a      	subs	r2, r3, #1
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	045b      	lsls	r3, r3, #17
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d301      	bcc.n	80013c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c4:	2301      	movs	r3, #1
 80013c6:	e010      	b.n	80013ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <SysTick_Config+0x44>)
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	3a01      	subs	r2, #1
 80013ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d0:	2301      	movs	r3, #1
 80013d2:	425b      	negs	r3, r3
 80013d4:	2103      	movs	r1, #3
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7ff ff7c 	bl	80012d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <SysTick_Config+0x44>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <SysTick_Config+0x44>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	0018      	movs	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	210f      	movs	r1, #15
 8001404:	187b      	adds	r3, r7, r1
 8001406:	1c02      	adds	r2, r0, #0
 8001408:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	187b      	adds	r3, r7, r1
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b25b      	sxtb	r3, r3
 8001412:	0011      	movs	r1, r2
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff ff5d 	bl	80012d4 <__NVIC_SetPriority>
}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b004      	add	sp, #16
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	0018      	movs	r0, r3
 800142e:	f7ff ffbf 	bl	80013b0 <SysTick_Config>
 8001432:	0003      	movs	r3, r0
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b002      	add	sp, #8
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	f000 fb6c 	bl	8001b28 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001450:	4bc8      	ldr	r3, [pc, #800]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	220c      	movs	r2, #12
 8001456:	4013      	ands	r3, r2
 8001458:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800145a:	4bc6      	ldr	r3, [pc, #792]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	025b      	lsls	r3, r3, #9
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2201      	movs	r2, #1
 800146c:	4013      	ands	r3, r2
 800146e:	d100      	bne.n	8001472 <HAL_RCC_OscConfig+0x36>
 8001470:	e07d      	b.n	800156e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	2b08      	cmp	r3, #8
 8001476:	d007      	beq.n	8001488 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	2b0c      	cmp	r3, #12
 800147c:	d112      	bne.n	80014a4 <HAL_RCC_OscConfig+0x68>
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	025b      	lsls	r3, r3, #9
 8001484:	429a      	cmp	r2, r3
 8001486:	d10d      	bne.n	80014a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	4bba      	ldr	r3, [pc, #744]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	029b      	lsls	r3, r3, #10
 8001490:	4013      	ands	r3, r2
 8001492:	d100      	bne.n	8001496 <HAL_RCC_OscConfig+0x5a>
 8001494:	e06a      	b.n	800156c <HAL_RCC_OscConfig+0x130>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d166      	bne.n	800156c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	f000 fb42 	bl	8001b28 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	025b      	lsls	r3, r3, #9
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d107      	bne.n	80014c0 <HAL_RCC_OscConfig+0x84>
 80014b0:	4bb0      	ldr	r3, [pc, #704]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4baf      	ldr	r3, [pc, #700]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80014b6:	2180      	movs	r1, #128	; 0x80
 80014b8:	0249      	lsls	r1, r1, #9
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	e027      	b.n	8001510 <HAL_RCC_OscConfig+0xd4>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	23a0      	movs	r3, #160	; 0xa0
 80014c6:	02db      	lsls	r3, r3, #11
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d10e      	bne.n	80014ea <HAL_RCC_OscConfig+0xae>
 80014cc:	4ba9      	ldr	r3, [pc, #676]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4ba8      	ldr	r3, [pc, #672]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	02c9      	lsls	r1, r1, #11
 80014d6:	430a      	orrs	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	4ba6      	ldr	r3, [pc, #664]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4ba5      	ldr	r3, [pc, #660]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	0249      	lsls	r1, r1, #9
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e012      	b.n	8001510 <HAL_RCC_OscConfig+0xd4>
 80014ea:	4ba2      	ldr	r3, [pc, #648]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4ba1      	ldr	r3, [pc, #644]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80014f0:	49a1      	ldr	r1, [pc, #644]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80014f2:	400a      	ands	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	4b9f      	ldr	r3, [pc, #636]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	025b      	lsls	r3, r3, #9
 80014fe:	4013      	ands	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4b9b      	ldr	r3, [pc, #620]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b9a      	ldr	r3, [pc, #616]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 800150a:	499c      	ldr	r1, [pc, #624]	; (800177c <HAL_RCC_OscConfig+0x340>)
 800150c:	400a      	ands	r2, r1
 800150e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d014      	beq.n	8001542 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff feae 	bl	8001278 <HAL_GetTick>
 800151c:	0003      	movs	r3, r0
 800151e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001522:	f7ff fea9 	bl	8001278 <HAL_GetTick>
 8001526:	0002      	movs	r2, r0
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b64      	cmp	r3, #100	; 0x64
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e2f9      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001534:	4b8f      	ldr	r3, [pc, #572]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	029b      	lsls	r3, r3, #10
 800153c:	4013      	ands	r3, r2
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0xe6>
 8001540:	e015      	b.n	800156e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff fe99 	bl	8001278 <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fe94 	bl	8001278 <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e2e4      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800155e:	4b85      	ldr	r3, [pc, #532]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	029b      	lsls	r3, r3, #10
 8001566:	4013      	ands	r3, r2
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x110>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2202      	movs	r2, #2
 8001574:	4013      	ands	r3, r2
 8001576:	d100      	bne.n	800157a <HAL_RCC_OscConfig+0x13e>
 8001578:	e099      	b.n	80016ae <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	2220      	movs	r2, #32
 8001584:	4013      	ands	r3, r2
 8001586:	d009      	beq.n	800159c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001588:	4b7a      	ldr	r3, [pc, #488]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b79      	ldr	r3, [pc, #484]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 800158e:	2120      	movs	r1, #32
 8001590:	430a      	orrs	r2, r1
 8001592:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	2220      	movs	r2, #32
 8001598:	4393      	bics	r3, r2
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d005      	beq.n	80015ae <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	2b0c      	cmp	r3, #12
 80015a6:	d13e      	bne.n	8001626 <HAL_RCC_OscConfig+0x1ea>
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d13b      	bne.n	8001626 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80015ae:	4b71      	ldr	r3, [pc, #452]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2204      	movs	r2, #4
 80015b4:	4013      	ands	r3, r2
 80015b6:	d004      	beq.n	80015c2 <HAL_RCC_OscConfig+0x186>
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e2b2      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	4b6c      	ldr	r3, [pc, #432]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4a6e      	ldr	r2, [pc, #440]	; (8001780 <HAL_RCC_OscConfig+0x344>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	021a      	lsls	r2, r3, #8
 80015d2:	4b68      	ldr	r3, [pc, #416]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80015d4:	430a      	orrs	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015d8:	4b66      	ldr	r3, [pc, #408]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2209      	movs	r2, #9
 80015de:	4393      	bics	r3, r2
 80015e0:	0019      	movs	r1, r3
 80015e2:	4b64      	ldr	r3, [pc, #400]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80015e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e6:	430a      	orrs	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015ea:	f000 fbeb 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 80015ee:	0001      	movs	r1, r0
 80015f0:	4b60      	ldr	r3, [pc, #384]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	220f      	movs	r2, #15
 80015f8:	4013      	ands	r3, r2
 80015fa:	4a62      	ldr	r2, [pc, #392]	; (8001784 <HAL_RCC_OscConfig+0x348>)
 80015fc:	5cd3      	ldrb	r3, [r2, r3]
 80015fe:	000a      	movs	r2, r1
 8001600:	40da      	lsrs	r2, r3
 8001602:	4b61      	ldr	r3, [pc, #388]	; (8001788 <HAL_RCC_OscConfig+0x34c>)
 8001604:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001606:	4b61      	ldr	r3, [pc, #388]	; (800178c <HAL_RCC_OscConfig+0x350>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2513      	movs	r5, #19
 800160c:	197c      	adds	r4, r7, r5
 800160e:	0018      	movs	r0, r3
 8001610:	f7ff fdec 	bl	80011ec <HAL_InitTick>
 8001614:	0003      	movs	r3, r0
 8001616:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001618:	197b      	adds	r3, r7, r5
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d046      	beq.n	80016ae <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001620:	197b      	adds	r3, r7, r5
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	e280      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	2b00      	cmp	r3, #0
 800162a:	d027      	beq.n	800167c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800162c:	4b51      	ldr	r3, [pc, #324]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2209      	movs	r2, #9
 8001632:	4393      	bics	r3, r2
 8001634:	0019      	movs	r1, r3
 8001636:	4b4f      	ldr	r3, [pc, #316]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 8001638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fe1b 	bl	8001278 <HAL_GetTick>
 8001642:	0003      	movs	r3, r0
 8001644:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001648:	f7ff fe16 	bl	8001278 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e266      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800165a:	4b46      	ldr	r3, [pc, #280]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2204      	movs	r2, #4
 8001660:	4013      	ands	r3, r2
 8001662:	d0f1      	beq.n	8001648 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b43      	ldr	r3, [pc, #268]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	4a45      	ldr	r2, [pc, #276]	; (8001780 <HAL_RCC_OscConfig+0x344>)
 800166a:	4013      	ands	r3, r2
 800166c:	0019      	movs	r1, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	021a      	lsls	r2, r3, #8
 8001674:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 8001676:	430a      	orrs	r2, r1
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	e018      	b.n	80016ae <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167c:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b3c      	ldr	r3, [pc, #240]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 8001682:	2101      	movs	r1, #1
 8001684:	438a      	bics	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fdf6 	bl	8001278 <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff fdf1 	bl	8001278 <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e241      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016a4:	4b33      	ldr	r3, [pc, #204]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2204      	movs	r2, #4
 80016aa:	4013      	ands	r3, r2
 80016ac:	d1f1      	bne.n	8001692 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2210      	movs	r2, #16
 80016b4:	4013      	ands	r3, r2
 80016b6:	d100      	bne.n	80016ba <HAL_RCC_OscConfig+0x27e>
 80016b8:	e0a1      	b.n	80017fe <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d140      	bne.n	8001742 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016c0:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_OscConfig+0x29c>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e227      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d8:	4b26      	ldr	r3, [pc, #152]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a2c      	ldr	r2, [pc, #176]	; (8001790 <HAL_RCC_OscConfig+0x354>)
 80016de:	4013      	ands	r3, r2
 80016e0:	0019      	movs	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1a      	ldr	r2, [r3, #32]
 80016e6:	4b23      	ldr	r3, [pc, #140]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80016e8:	430a      	orrs	r2, r1
 80016ea:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	0a19      	lsrs	r1, r3, #8
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	061a      	lsls	r2, r3, #24
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 80016fc:	430a      	orrs	r2, r1
 80016fe:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	0b5b      	lsrs	r3, r3, #13
 8001706:	3301      	adds	r3, #1
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	0212      	lsls	r2, r2, #8
 800170c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	091b      	lsrs	r3, r3, #4
 8001714:	210f      	movs	r1, #15
 8001716:	400b      	ands	r3, r1
 8001718:	491a      	ldr	r1, [pc, #104]	; (8001784 <HAL_RCC_OscConfig+0x348>)
 800171a:	5ccb      	ldrb	r3, [r1, r3]
 800171c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <HAL_RCC_OscConfig+0x34c>)
 8001720:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001722:	4b1a      	ldr	r3, [pc, #104]	; (800178c <HAL_RCC_OscConfig+0x350>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2513      	movs	r5, #19
 8001728:	197c      	adds	r4, r7, r5
 800172a:	0018      	movs	r0, r3
 800172c:	f7ff fd5e 	bl	80011ec <HAL_InitTick>
 8001730:	0003      	movs	r3, r0
 8001732:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001734:	197b      	adds	r3, r7, r5
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d060      	beq.n	80017fe <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800173c:	197b      	adds	r3, r7, r5
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	e1f2      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d03f      	beq.n	80017ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_RCC_OscConfig+0x338>)
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	0049      	lsls	r1, r1, #1
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fd8e 	bl	8001278 <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001760:	e018      	b.n	8001794 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001762:	f7ff fd89 	bl	8001278 <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d911      	bls.n	8001794 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e1d9      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
 8001774:	40021000 	.word	0x40021000
 8001778:	fffeffff 	.word	0xfffeffff
 800177c:	fffbffff 	.word	0xfffbffff
 8001780:	ffffe0ff 	.word	0xffffe0ff
 8001784:	08002484 	.word	0x08002484
 8001788:	20000000 	.word	0x20000000
 800178c:	20000004 	.word	0x20000004
 8001790:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001794:	4bc9      	ldr	r3, [pc, #804]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4013      	ands	r3, r2
 800179e:	d0e0      	beq.n	8001762 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017a0:	4bc6      	ldr	r3, [pc, #792]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4ac6      	ldr	r2, [pc, #792]	; (8001ac0 <HAL_RCC_OscConfig+0x684>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	0019      	movs	r1, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1a      	ldr	r2, [r3, #32]
 80017ae:	4bc3      	ldr	r3, [pc, #780]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 80017b0:	430a      	orrs	r2, r1
 80017b2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b4:	4bc1      	ldr	r3, [pc, #772]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	0a19      	lsrs	r1, r3, #8
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	061a      	lsls	r2, r3, #24
 80017c2:	4bbe      	ldr	r3, [pc, #760]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 80017c4:	430a      	orrs	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	e019      	b.n	80017fe <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017ca:	4bbc      	ldr	r3, [pc, #752]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4bbb      	ldr	r3, [pc, #748]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 80017d0:	49bc      	ldr	r1, [pc, #752]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 80017d2:	400a      	ands	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d6:	f7ff fd4f 	bl	8001278 <HAL_GetTick>
 80017da:	0003      	movs	r3, r0
 80017dc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017e0:	f7ff fd4a 	bl	8001278 <HAL_GetTick>
 80017e4:	0002      	movs	r2, r0
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e19a      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017f2:	4bb2      	ldr	r3, [pc, #712]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4013      	ands	r3, r2
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2208      	movs	r2, #8
 8001804:	4013      	ands	r3, r2
 8001806:	d036      	beq.n	8001876 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d019      	beq.n	8001844 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001810:	4baa      	ldr	r3, [pc, #680]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001814:	4ba9      	ldr	r3, [pc, #676]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001816:	2101      	movs	r1, #1
 8001818:	430a      	orrs	r2, r1
 800181a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181c:	f7ff fd2c 	bl	8001278 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001826:	f7ff fd27 	bl	8001278 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e177      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001838:	4ba0      	ldr	r3, [pc, #640]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 800183a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800183c:	2202      	movs	r2, #2
 800183e:	4013      	ands	r3, r2
 8001840:	d0f1      	beq.n	8001826 <HAL_RCC_OscConfig+0x3ea>
 8001842:	e018      	b.n	8001876 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001844:	4b9d      	ldr	r3, [pc, #628]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001846:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001848:	4b9c      	ldr	r3, [pc, #624]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 800184a:	2101      	movs	r1, #1
 800184c:	438a      	bics	r2, r1
 800184e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001850:	f7ff fd12 	bl	8001278 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff fd0d 	bl	8001278 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e15d      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800186c:	4b93      	ldr	r3, [pc, #588]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 800186e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001870:	2202      	movs	r2, #2
 8001872:	4013      	ands	r3, r2
 8001874:	d1f1      	bne.n	800185a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2204      	movs	r2, #4
 800187c:	4013      	ands	r3, r2
 800187e:	d100      	bne.n	8001882 <HAL_RCC_OscConfig+0x446>
 8001880:	e0ae      	b.n	80019e0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001882:	2023      	movs	r0, #35	; 0x23
 8001884:	183b      	adds	r3, r7, r0
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188a:	4b8c      	ldr	r3, [pc, #560]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 800188c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	055b      	lsls	r3, r3, #21
 8001892:	4013      	ands	r3, r2
 8001894:	d109      	bne.n	80018aa <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b89      	ldr	r3, [pc, #548]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800189a:	4b88      	ldr	r3, [pc, #544]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	0549      	lsls	r1, r1, #21
 80018a0:	430a      	orrs	r2, r1
 80018a2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80018a4:	183b      	adds	r3, r7, r0
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018aa:	4b87      	ldr	r3, [pc, #540]	; (8001ac8 <HAL_RCC_OscConfig+0x68c>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4013      	ands	r3, r2
 80018b4:	d11a      	bne.n	80018ec <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b6:	4b84      	ldr	r3, [pc, #528]	; (8001ac8 <HAL_RCC_OscConfig+0x68c>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b83      	ldr	r3, [pc, #524]	; (8001ac8 <HAL_RCC_OscConfig+0x68c>)
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	0049      	lsls	r1, r1, #1
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c4:	f7ff fcd8 	bl	8001278 <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ce:	f7ff fcd3 	bl	8001278 <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b64      	cmp	r3, #100	; 0x64
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e123      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e0:	4b79      	ldr	r3, [pc, #484]	; (8001ac8 <HAL_RCC_OscConfig+0x68c>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4013      	ands	r3, r2
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_OscConfig+0x4cc>
 80018f8:	4b70      	ldr	r3, [pc, #448]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 80018fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018fc:	4b6f      	ldr	r3, [pc, #444]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 80018fe:	2180      	movs	r1, #128	; 0x80
 8001900:	0049      	lsls	r1, r1, #1
 8001902:	430a      	orrs	r2, r1
 8001904:	651a      	str	r2, [r3, #80]	; 0x50
 8001906:	e031      	b.n	800196c <HAL_RCC_OscConfig+0x530>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10c      	bne.n	800192a <HAL_RCC_OscConfig+0x4ee>
 8001910:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001912:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001914:	4b69      	ldr	r3, [pc, #420]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001916:	496b      	ldr	r1, [pc, #428]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001918:	400a      	ands	r2, r1
 800191a:	651a      	str	r2, [r3, #80]	; 0x50
 800191c:	4b67      	ldr	r3, [pc, #412]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 800191e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001920:	4b66      	ldr	r3, [pc, #408]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001922:	496a      	ldr	r1, [pc, #424]	; (8001acc <HAL_RCC_OscConfig+0x690>)
 8001924:	400a      	ands	r2, r1
 8001926:	651a      	str	r2, [r3, #80]	; 0x50
 8001928:	e020      	b.n	800196c <HAL_RCC_OscConfig+0x530>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	23a0      	movs	r3, #160	; 0xa0
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	429a      	cmp	r2, r3
 8001934:	d10e      	bne.n	8001954 <HAL_RCC_OscConfig+0x518>
 8001936:	4b61      	ldr	r3, [pc, #388]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001938:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800193a:	4b60      	ldr	r3, [pc, #384]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	00c9      	lsls	r1, r1, #3
 8001940:	430a      	orrs	r2, r1
 8001942:	651a      	str	r2, [r3, #80]	; 0x50
 8001944:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001946:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001948:	4b5c      	ldr	r3, [pc, #368]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	0049      	lsls	r1, r1, #1
 800194e:	430a      	orrs	r2, r1
 8001950:	651a      	str	r2, [r3, #80]	; 0x50
 8001952:	e00b      	b.n	800196c <HAL_RCC_OscConfig+0x530>
 8001954:	4b59      	ldr	r3, [pc, #356]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001956:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001958:	4b58      	ldr	r3, [pc, #352]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 800195a:	495a      	ldr	r1, [pc, #360]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 800195c:	400a      	ands	r2, r1
 800195e:	651a      	str	r2, [r3, #80]	; 0x50
 8001960:	4b56      	ldr	r3, [pc, #344]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001962:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001964:	4b55      	ldr	r3, [pc, #340]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001966:	4959      	ldr	r1, [pc, #356]	; (8001acc <HAL_RCC_OscConfig+0x690>)
 8001968:	400a      	ands	r2, r1
 800196a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d015      	beq.n	80019a0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001974:	f7ff fc80 	bl	8001278 <HAL_GetTick>
 8001978:	0003      	movs	r3, r0
 800197a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800197c:	e009      	b.n	8001992 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800197e:	f7ff fc7b 	bl	8001278 <HAL_GetTick>
 8001982:	0002      	movs	r2, r0
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	4a51      	ldr	r2, [pc, #324]	; (8001ad0 <HAL_RCC_OscConfig+0x694>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e0ca      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001992:	4b4a      	ldr	r3, [pc, #296]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001994:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4013      	ands	r3, r2
 800199c:	d0ef      	beq.n	800197e <HAL_RCC_OscConfig+0x542>
 800199e:	e014      	b.n	80019ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a0:	f7ff fc6a 	bl	8001278 <HAL_GetTick>
 80019a4:	0003      	movs	r3, r0
 80019a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019a8:	e009      	b.n	80019be <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019aa:	f7ff fc65 	bl	8001278 <HAL_GetTick>
 80019ae:	0002      	movs	r2, r0
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <HAL_RCC_OscConfig+0x694>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e0b4      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019be:	4b3f      	ldr	r3, [pc, #252]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 80019c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4013      	ands	r3, r2
 80019c8:	d1ef      	bne.n	80019aa <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019ca:	2323      	movs	r3, #35	; 0x23
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d4:	4b39      	ldr	r3, [pc, #228]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 80019d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019d8:	4b38      	ldr	r3, [pc, #224]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 80019da:	493e      	ldr	r1, [pc, #248]	; (8001ad4 <HAL_RCC_OscConfig+0x698>)
 80019dc:	400a      	ands	r2, r1
 80019de:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d100      	bne.n	80019ea <HAL_RCC_OscConfig+0x5ae>
 80019e8:	e09d      	b.n	8001b26 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	2b0c      	cmp	r3, #12
 80019ee:	d100      	bne.n	80019f2 <HAL_RCC_OscConfig+0x5b6>
 80019f0:	e076      	b.n	8001ae0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d145      	bne.n	8001a86 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fa:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4b2f      	ldr	r3, [pc, #188]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001a00:	4935      	ldr	r1, [pc, #212]	; (8001ad8 <HAL_RCC_OscConfig+0x69c>)
 8001a02:	400a      	ands	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a06:	f7ff fc37 	bl	8001278 <HAL_GetTick>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff fc32 	bl	8001278 <HAL_GetTick>
 8001a14:	0002      	movs	r2, r0
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e082      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	049b      	lsls	r3, r3, #18
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2e:	4b23      	ldr	r3, [pc, #140]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	4a2a      	ldr	r2, [pc, #168]	; (8001adc <HAL_RCC_OscConfig+0x6a0>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	431a      	orrs	r2, r3
 8001a48:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001a54:	2180      	movs	r1, #128	; 0x80
 8001a56:	0449      	lsls	r1, r1, #17
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fc0c 	bl	8001278 <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a66:	f7ff fc07 	bl	8001278 <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e057      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	049b      	lsls	r3, r3, #18
 8001a80:	4013      	ands	r3, r2
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x62a>
 8001a84:	e04f      	b.n	8001b26 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001a8c:	4912      	ldr	r1, [pc, #72]	; (8001ad8 <HAL_RCC_OscConfig+0x69c>)
 8001a8e:	400a      	ands	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff fbf1 	bl	8001278 <HAL_GetTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff fbec 	bl	8001278 <HAL_GetTick>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e03c      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001aae:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_RCC_OscConfig+0x680>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	049b      	lsls	r3, r3, #18
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x660>
 8001aba:	e034      	b.n	8001b26 <HAL_RCC_OscConfig+0x6ea>
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	ffff1fff 	.word	0xffff1fff
 8001ac4:	fffffeff 	.word	0xfffffeff
 8001ac8:	40007000 	.word	0x40007000
 8001acc:	fffffbff 	.word	0xfffffbff
 8001ad0:	00001388 	.word	0x00001388
 8001ad4:	efffffff 	.word	0xefffffff
 8001ad8:	feffffff 	.word	0xfeffffff
 8001adc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e01d      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_RCC_OscConfig+0x6f4>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	025b      	lsls	r3, r3, #9
 8001af8:	401a      	ands	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d10f      	bne.n	8001b22 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	23f0      	movs	r3, #240	; 0xf0
 8001b06:	039b      	lsls	r3, r3, #14
 8001b08:	401a      	ands	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	23c0      	movs	r3, #192	; 0xc0
 8001b16:	041b      	lsls	r3, r3, #16
 8001b18:	401a      	ands	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	0018      	movs	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b00a      	add	sp, #40	; 0x28
 8001b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b34:	b5b0      	push	{r4, r5, r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e128      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b96      	ldr	r3, [pc, #600]	; (8001da4 <HAL_RCC_ClockConfig+0x270>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4013      	ands	r3, r2
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d91e      	bls.n	8001b94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b93      	ldr	r3, [pc, #588]	; (8001da4 <HAL_RCC_ClockConfig+0x270>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4393      	bics	r3, r2
 8001b5e:	0019      	movs	r1, r3
 8001b60:	4b90      	ldr	r3, [pc, #576]	; (8001da4 <HAL_RCC_ClockConfig+0x270>)
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b68:	f7ff fb86 	bl	8001278 <HAL_GetTick>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b70:	e009      	b.n	8001b86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b72:	f7ff fb81 	bl	8001278 <HAL_GetTick>
 8001b76:	0002      	movs	r2, r0
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	4a8a      	ldr	r2, [pc, #552]	; (8001da8 <HAL_RCC_ClockConfig+0x274>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e109      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b86:	4b87      	ldr	r3, [pc, #540]	; (8001da4 <HAL_RCC_ClockConfig+0x270>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d1ee      	bne.n	8001b72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b9e:	4b83      	ldr	r3, [pc, #524]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	22f0      	movs	r2, #240	; 0xf0
 8001ba4:	4393      	bics	r3, r2
 8001ba6:	0019      	movs	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	4b7f      	ldr	r3, [pc, #508]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d100      	bne.n	8001bbe <HAL_RCC_ClockConfig+0x8a>
 8001bbc:	e089      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bc6:	4b79      	ldr	r3, [pc, #484]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	029b      	lsls	r3, r3, #10
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d120      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0e1      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bde:	4b73      	ldr	r3, [pc, #460]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	049b      	lsls	r3, r3, #18
 8001be6:	4013      	ands	r3, r2
 8001be8:	d114      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0d5      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d106      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bf6:	4b6d      	ldr	r3, [pc, #436]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d109      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0ca      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c04:	4b69      	ldr	r3, [pc, #420]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0c2      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c14:	4b65      	ldr	r3, [pc, #404]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2203      	movs	r2, #3
 8001c1a:	4393      	bics	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	4b62      	ldr	r3, [pc, #392]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c28:	f7ff fb26 	bl	8001278 <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d111      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c38:	e009      	b.n	8001c4e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3a:	f7ff fb1d 	bl	8001278 <HAL_GetTick>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	4a58      	ldr	r2, [pc, #352]	; (8001da8 <HAL_RCC_ClockConfig+0x274>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e0a5      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c4e:	4b57      	ldr	r3, [pc, #348]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	220c      	movs	r2, #12
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d1ef      	bne.n	8001c3a <HAL_RCC_ClockConfig+0x106>
 8001c5a:	e03a      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d111      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c64:	e009      	b.n	8001c7a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c66:	f7ff fb07 	bl	8001278 <HAL_GetTick>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	4a4d      	ldr	r2, [pc, #308]	; (8001da8 <HAL_RCC_ClockConfig+0x274>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e08f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	220c      	movs	r2, #12
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b0c      	cmp	r3, #12
 8001c84:	d1ef      	bne.n	8001c66 <HAL_RCC_ClockConfig+0x132>
 8001c86:	e024      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d11b      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c90:	e009      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c92:	f7ff faf1 	bl	8001278 <HAL_GetTick>
 8001c96:	0002      	movs	r2, r0
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	4a42      	ldr	r2, [pc, #264]	; (8001da8 <HAL_RCC_ClockConfig+0x274>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e079      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ca6:	4b41      	ldr	r3, [pc, #260]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	220c      	movs	r2, #12
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d1ef      	bne.n	8001c92 <HAL_RCC_ClockConfig+0x15e>
 8001cb2:	e00e      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f7ff fae0 	bl	8001278 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	4a3a      	ldr	r2, [pc, #232]	; (8001da8 <HAL_RCC_ClockConfig+0x274>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e068      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cc8:	4b38      	ldr	r3, [pc, #224]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	220c      	movs	r2, #12
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd2:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <HAL_RCC_ClockConfig+0x270>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d21e      	bcs.n	8001d1e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce0:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <HAL_RCC_ClockConfig+0x270>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4393      	bics	r3, r2
 8001ce8:	0019      	movs	r1, r3
 8001cea:	4b2e      	ldr	r3, [pc, #184]	; (8001da4 <HAL_RCC_ClockConfig+0x270>)
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cf2:	f7ff fac1 	bl	8001278 <HAL_GetTick>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	e009      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7ff fabc 	bl	8001278 <HAL_GetTick>
 8001d00:	0002      	movs	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	4a28      	ldr	r2, [pc, #160]	; (8001da8 <HAL_RCC_ClockConfig+0x274>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e044      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d10:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_RCC_ClockConfig+0x270>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2201      	movs	r2, #1
 8001d16:	4013      	ands	r3, r2
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d1ee      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2204      	movs	r2, #4
 8001d24:	4013      	ands	r3, r2
 8001d26:	d009      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4a20      	ldr	r2, [pc, #128]	; (8001db0 <HAL_RCC_ClockConfig+0x27c>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	0019      	movs	r1, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2208      	movs	r2, #8
 8001d42:	4013      	ands	r3, r2
 8001d44:	d00a      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	4a1a      	ldr	r2, [pc, #104]	; (8001db4 <HAL_RCC_ClockConfig+0x280>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	00da      	lsls	r2, r3, #3
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d5c:	f000 f832 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8001d60:	0001      	movs	r1, r0
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_RCC_ClockConfig+0x278>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	220f      	movs	r2, #15
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <HAL_RCC_ClockConfig+0x284>)
 8001d6e:	5cd3      	ldrb	r3, [r2, r3]
 8001d70:	000a      	movs	r2, r1
 8001d72:	40da      	lsrs	r2, r3
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_RCC_ClockConfig+0x288>)
 8001d76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_RCC_ClockConfig+0x28c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	250b      	movs	r5, #11
 8001d7e:	197c      	adds	r4, r7, r5
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7ff fa33 	bl	80011ec <HAL_InitTick>
 8001d86:	0003      	movs	r3, r0
 8001d88:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d8a:	197b      	adds	r3, r7, r5
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001d92:	197b      	adds	r3, r7, r5
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b004      	add	sp, #16
 8001da0:	bdb0      	pop	{r4, r5, r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	40022000 	.word	0x40022000
 8001da8:	00001388 	.word	0x00001388
 8001dac:	40021000 	.word	0x40021000
 8001db0:	fffff8ff 	.word	0xfffff8ff
 8001db4:	ffffc7ff 	.word	0xffffc7ff
 8001db8:	08002484 	.word	0x08002484
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	20000004 	.word	0x20000004

08001dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc4:	b5b0      	push	{r4, r5, r7, lr}
 8001dc6:	b08e      	sub	sp, #56	; 0x38
 8001dc8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001dca:	4b4c      	ldr	r3, [pc, #304]	; (8001efc <HAL_RCC_GetSysClockFreq+0x138>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd2:	230c      	movs	r3, #12
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d014      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x40>
 8001dda:	d900      	bls.n	8001dde <HAL_RCC_GetSysClockFreq+0x1a>
 8001ddc:	e07b      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x112>
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d002      	beq.n	8001de8 <HAL_RCC_GetSysClockFreq+0x24>
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d00b      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0x3a>
 8001de6:	e076      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001de8:	4b44      	ldr	r3, [pc, #272]	; (8001efc <HAL_RCC_GetSysClockFreq+0x138>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2210      	movs	r2, #16
 8001dee:	4013      	ands	r3, r2
 8001df0:	d002      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001df2:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001df4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001df6:	e07c      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001df8:	4b42      	ldr	r3, [pc, #264]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x140>)
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dfc:	e079      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dfe:	4b42      	ldr	r3, [pc, #264]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e02:	e076      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e06:	0c9a      	lsrs	r2, r3, #18
 8001e08:	230f      	movs	r3, #15
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	4b3f      	ldr	r3, [pc, #252]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x148>)
 8001e0e:	5c9b      	ldrb	r3, [r3, r2]
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e14:	0d9a      	lsrs	r2, r3, #22
 8001e16:	2303      	movs	r3, #3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e1e:	4b37      	ldr	r3, [pc, #220]	; (8001efc <HAL_RCC_GetSysClockFreq+0x138>)
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	025b      	lsls	r3, r3, #9
 8001e26:	4013      	ands	r3, r2
 8001e28:	d01a      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	4a35      	ldr	r2, [pc, #212]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e34:	2300      	movs	r3, #0
 8001e36:	69b8      	ldr	r0, [r7, #24]
 8001e38:	69f9      	ldr	r1, [r7, #28]
 8001e3a:	f7fe fa11 	bl	8000260 <__aeabi_lmul>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	000b      	movs	r3, r1
 8001e42:	0010      	movs	r0, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f7fe f9e5 	bl	8000220 <__aeabi_uldivmod>
 8001e56:	0002      	movs	r2, r0
 8001e58:	000b      	movs	r3, r1
 8001e5a:	0013      	movs	r3, r2
 8001e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e5e:	e037      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e60:	4b26      	ldr	r3, [pc, #152]	; (8001efc <HAL_RCC_GetSysClockFreq+0x138>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2210      	movs	r2, #16
 8001e66:	4013      	ands	r3, r2
 8001e68:	d01a      	beq.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4a23      	ldr	r2, [pc, #140]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e74:	2300      	movs	r3, #0
 8001e76:	68b8      	ldr	r0, [r7, #8]
 8001e78:	68f9      	ldr	r1, [r7, #12]
 8001e7a:	f7fe f9f1 	bl	8000260 <__aeabi_lmul>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	000b      	movs	r3, r1
 8001e82:	0010      	movs	r0, r2
 8001e84:	0019      	movs	r1, r3
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f7fe f9c5 	bl	8000220 <__aeabi_uldivmod>
 8001e96:	0002      	movs	r2, r0
 8001e98:	000b      	movs	r3, r1
 8001e9a:	0013      	movs	r3, r2
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e9e:	e017      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	4a16      	ldr	r2, [pc, #88]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x140>)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f7fe f9d8 	bl	8000260 <__aeabi_lmul>
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	000b      	movs	r3, r1
 8001eb4:	0010      	movs	r0, r2
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	001c      	movs	r4, r3
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	001d      	movs	r5, r3
 8001ec0:	0022      	movs	r2, r4
 8001ec2:	002b      	movs	r3, r5
 8001ec4:	f7fe f9ac 	bl	8000220 <__aeabi_uldivmod>
 8001ec8:	0002      	movs	r2, r0
 8001eca:	000b      	movs	r3, r1
 8001ecc:	0013      	movs	r3, r2
 8001ece:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ed4:	e00d      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_RCC_GetSysClockFreq+0x138>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	0b5b      	lsrs	r3, r3, #13
 8001edc:	2207      	movs	r2, #7
 8001ede:	4013      	ands	r3, r2
 8001ee0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	2280      	movs	r2, #128	; 0x80
 8001ee8:	0212      	lsls	r2, r2, #8
 8001eea:	409a      	lsls	r2, r3
 8001eec:	0013      	movs	r3, r2
 8001eee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ef0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b00e      	add	sp, #56	; 0x38
 8001efa:	bdb0      	pop	{r4, r5, r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	003d0900 	.word	0x003d0900
 8001f04:	00f42400 	.word	0x00f42400
 8001f08:	007a1200 	.word	0x007a1200
 8001f0c:	08002494 	.word	0x08002494

08001f10 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001f18:	2017      	movs	r0, #23
 8001f1a:	183b      	adds	r3, r7, r0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2220      	movs	r2, #32
 8001f26:	4013      	ands	r3, r2
 8001f28:	d100      	bne.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001f2a:	e0c7      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2c:	4b93      	ldr	r3, [pc, #588]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	055b      	lsls	r3, r3, #21
 8001f34:	4013      	ands	r3, r2
 8001f36:	d109      	bne.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	4b90      	ldr	r3, [pc, #576]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f3c:	4b8f      	ldr	r3, [pc, #572]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	0549      	lsls	r1, r1, #21
 8001f42:	430a      	orrs	r2, r1
 8001f44:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f46:	183b      	adds	r3, r7, r0
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4c:	4b8c      	ldr	r3, [pc, #560]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4013      	ands	r3, r2
 8001f56:	d11a      	bne.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f58:	4b89      	ldr	r3, [pc, #548]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b88      	ldr	r3, [pc, #544]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001f5e:	2180      	movs	r1, #128	; 0x80
 8001f60:	0049      	lsls	r1, r1, #1
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f66:	f7ff f987 	bl	8001278 <HAL_GetTick>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	e008      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f70:	f7ff f982 	bl	8001278 <HAL_GetTick>
 8001f74:	0002      	movs	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e0f8      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x264>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	4b7f      	ldr	r3, [pc, #508]	; (8002180 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001f8e:	4b7b      	ldr	r3, [pc, #492]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	23c0      	movs	r3, #192	; 0xc0
 8001f94:	039b      	lsls	r3, r3, #14
 8001f96:	4013      	ands	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	23c0      	movs	r3, #192	; 0xc0
 8001fa0:	039b      	lsls	r3, r3, #14
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d013      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	23c0      	movs	r3, #192	; 0xc0
 8001fb0:	029b      	lsls	r3, r3, #10
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	23c0      	movs	r3, #192	; 0xc0
 8001fb6:	029b      	lsls	r3, r3, #10
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d10a      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001fbc:	4b6f      	ldr	r3, [pc, #444]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	029b      	lsls	r3, r3, #10
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	029b      	lsls	r3, r3, #10
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0d0      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x264>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001fd2:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001fd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd6:	23c0      	movs	r3, #192	; 0xc0
 8001fd8:	029b      	lsls	r3, r3, #10
 8001fda:	4013      	ands	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d03b      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	23c0      	movs	r3, #192	; 0xc0
 8001fea:	029b      	lsls	r3, r3, #10
 8001fec:	4013      	ands	r3, r2
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d033      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d02e      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ffe:	4b5f      	ldr	r3, [pc, #380]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002002:	4a60      	ldr	r2, [pc, #384]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002004:	4013      	ands	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002008:	4b5c      	ldr	r3, [pc, #368]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800200a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800200c:	4b5b      	ldr	r3, [pc, #364]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	0309      	lsls	r1, r1, #12
 8002012:	430a      	orrs	r2, r1
 8002014:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002016:	4b59      	ldr	r3, [pc, #356]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002018:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800201a:	4b58      	ldr	r3, [pc, #352]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800201c:	495a      	ldr	r1, [pc, #360]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800201e:	400a      	ands	r2, r1
 8002020:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002022:	4b56      	ldr	r3, [pc, #344]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4013      	ands	r3, r2
 8002030:	d014      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7ff f921 	bl	8001278 <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800203a:	e009      	b.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7ff f91c 	bl	8001278 <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	4a51      	ldr	r2, [pc, #324]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e091      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x264>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002050:	4b4a      	ldr	r3, [pc, #296]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002052:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4013      	ands	r3, r2
 800205a:	d0ef      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2220      	movs	r2, #32
 8002062:	4013      	ands	r3, r2
 8002064:	d01f      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	23c0      	movs	r3, #192	; 0xc0
 800206c:	029b      	lsls	r3, r3, #10
 800206e:	401a      	ands	r2, r3
 8002070:	23c0      	movs	r3, #192	; 0xc0
 8002072:	029b      	lsls	r3, r3, #10
 8002074:	429a      	cmp	r2, r3
 8002076:	d10c      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002078:	4b40      	ldr	r3, [pc, #256]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a44      	ldr	r2, [pc, #272]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800207e:	4013      	ands	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	23c0      	movs	r3, #192	; 0xc0
 8002088:	039b      	lsls	r3, r3, #14
 800208a:	401a      	ands	r2, r3
 800208c:	4b3b      	ldr	r3, [pc, #236]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	4b3a      	ldr	r3, [pc, #232]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002094:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	23c0      	movs	r3, #192	; 0xc0
 800209c:	029b      	lsls	r3, r3, #10
 800209e:	401a      	ands	r2, r3
 80020a0:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80020a2:	430a      	orrs	r2, r1
 80020a4:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020a6:	2317      	movs	r3, #23
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d105      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b0:	4b32      	ldr	r3, [pc, #200]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80020b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020b4:	4b31      	ldr	r3, [pc, #196]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80020b6:	4937      	ldr	r1, [pc, #220]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80020b8:	400a      	ands	r2, r1
 80020ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2201      	movs	r2, #1
 80020c2:	4013      	ands	r3, r2
 80020c4:	d009      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020c6:	4b2d      	ldr	r3, [pc, #180]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ca:	2203      	movs	r2, #3
 80020cc:	4393      	bics	r3, r2
 80020ce:	0019      	movs	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	4b29      	ldr	r3, [pc, #164]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80020d6:	430a      	orrs	r2, r1
 80020d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2202      	movs	r2, #2
 80020e0:	4013      	ands	r3, r2
 80020e2:	d009      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020e4:	4b25      	ldr	r3, [pc, #148]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80020e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e8:	220c      	movs	r2, #12
 80020ea:	4393      	bics	r3, r2
 80020ec:	0019      	movs	r1, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80020f4:	430a      	orrs	r2, r1
 80020f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2204      	movs	r2, #4
 80020fe:	4013      	ands	r3, r2
 8002100:	d009      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002102:	4b1e      	ldr	r3, [pc, #120]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	4a24      	ldr	r2, [pc, #144]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002108:	4013      	ands	r3, r2
 800210a:	0019      	movs	r1, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002112:	430a      	orrs	r2, r1
 8002114:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2208      	movs	r2, #8
 800211c:	4013      	ands	r3, r2
 800211e:	d009      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002124:	4a1d      	ldr	r2, [pc, #116]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002126:	4013      	ands	r3, r2
 8002128:	0019      	movs	r1, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	695a      	ldr	r2, [r3, #20]
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002130:	430a      	orrs	r2, r1
 8002132:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4013      	ands	r3, r2
 800213e:	d009      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002140:	4b0e      	ldr	r3, [pc, #56]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002144:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002146:	4013      	ands	r3, r2
 8002148:	0019      	movs	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002150:	430a      	orrs	r2, r1
 8002152:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	4013      	ands	r3, r2
 800215c:	d009      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800215e:	4b07      	ldr	r3, [pc, #28]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002164:	4013      	ands	r3, r2
 8002166:	0019      	movs	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69da      	ldr	r2, [r3, #28]
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800216e:	430a      	orrs	r2, r1
 8002170:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	b006      	add	sp, #24
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	40007000 	.word	0x40007000
 8002184:	fffcffff 	.word	0xfffcffff
 8002188:	fff7ffff 	.word	0xfff7ffff
 800218c:	00001388 	.word	0x00001388
 8002190:	ffcfffff 	.word	0xffcfffff
 8002194:	efffffff 	.word	0xefffffff
 8002198:	fffff3ff 	.word	0xfffff3ff
 800219c:	ffffcfff 	.word	0xffffcfff
 80021a0:	fff3ffff 	.word	0xfff3ffff

080021a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021a4:	b5b0      	push	{r4, r5, r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021ac:	230f      	movs	r3, #15
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e088      	b.n	80022d0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2221      	movs	r2, #33	; 0x21
 80021c2:	5c9b      	ldrb	r3, [r3, r2]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d107      	bne.n	80021da <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2220      	movs	r2, #32
 80021ce:	2100      	movs	r1, #0
 80021d0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7fe fa51 	bl	800067c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2221      	movs	r2, #33	; 0x21
 80021de:	2102      	movs	r1, #2
 80021e0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2210      	movs	r2, #16
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b10      	cmp	r3, #16
 80021ee:	d05f      	beq.n	80022b0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	22ca      	movs	r2, #202	; 0xca
 80021f6:	625a      	str	r2, [r3, #36]	; 0x24
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2253      	movs	r2, #83	; 0x53
 80021fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002200:	250f      	movs	r5, #15
 8002202:	197c      	adds	r4, r7, r5
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0018      	movs	r0, r3
 8002208:	f000 f890 	bl	800232c <RTC_EnterInitMode>
 800220c:	0003      	movs	r3, r0
 800220e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002210:	0028      	movs	r0, r5
 8002212:	183b      	adds	r3, r7, r0
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d12c      	bne.n	8002274 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	492c      	ldr	r1, [pc, #176]	; (80022d8 <HAL_RTC_Init+0x134>)
 8002226:	400a      	ands	r2, r1
 8002228:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6899      	ldr	r1, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68d2      	ldr	r2, [r2, #12]
 8002250:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6919      	ldr	r1, [r3, #16]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	041a      	lsls	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002266:	183c      	adds	r4, r7, r0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	0018      	movs	r0, r3
 800226c:	f000 f8a2 	bl	80023b4 <RTC_ExitInitMode>
 8002270:	0003      	movs	r3, r0
 8002272:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002274:	230f      	movs	r3, #15
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d113      	bne.n	80022a6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2103      	movs	r1, #3
 800228a:	438a      	bics	r2, r1
 800228c:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	22ff      	movs	r2, #255	; 0xff
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
 80022ae:	e003      	b.n	80022b8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80022b0:	230f      	movs	r3, #15
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80022b8:	230f      	movs	r3, #15
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d103      	bne.n	80022ca <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2221      	movs	r2, #33	; 0x21
 80022c6:	2101      	movs	r1, #1
 80022c8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80022ca:	230f      	movs	r3, #15
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	781b      	ldrb	r3, [r3, #0]
}
 80022d0:	0018      	movs	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b004      	add	sp, #16
 80022d6:	bdb0      	pop	{r4, r5, r7, pc}
 80022d8:	ff8fffbf 	.word	0xff8fffbf

080022dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <HAL_RTC_WaitForSynchro+0x4c>)
 80022ee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022f0:	f7fe ffc2 	bl	8001278 <HAL_GetTick>
 80022f4:	0003      	movs	r3, r0
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80022f8:	e00a      	b.n	8002310 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80022fa:	f7fe ffbd 	bl	8001278 <HAL_GetTick>
 80022fe:	0002      	movs	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1ad2      	subs	r2, r2, r3
 8002304:	23fa      	movs	r3, #250	; 0xfa
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	429a      	cmp	r2, r3
 800230a:	d901      	bls.n	8002310 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e006      	b.n	800231e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	2220      	movs	r2, #32
 8002318:	4013      	ands	r3, r2
 800231a:	d0ee      	beq.n	80022fa <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b004      	add	sp, #16
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	0001ff5f 	.word	0x0001ff5f

0800232c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002338:	230f      	movs	r3, #15
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2240      	movs	r2, #64	; 0x40
 8002348:	4013      	ands	r3, r2
 800234a:	d12c      	bne.n	80023a6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2180      	movs	r1, #128	; 0x80
 8002358:	430a      	orrs	r2, r1
 800235a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800235c:	f7fe ff8c 	bl	8001278 <HAL_GetTick>
 8002360:	0003      	movs	r3, r0
 8002362:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002364:	e014      	b.n	8002390 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002366:	f7fe ff87 	bl	8001278 <HAL_GetTick>
 800236a:	0002      	movs	r2, r0
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	1ad2      	subs	r2, r2, r3
 8002370:	200f      	movs	r0, #15
 8002372:	183b      	adds	r3, r7, r0
 8002374:	1839      	adds	r1, r7, r0
 8002376:	7809      	ldrb	r1, [r1, #0]
 8002378:	7019      	strb	r1, [r3, #0]
 800237a:	23fa      	movs	r3, #250	; 0xfa
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	429a      	cmp	r2, r3
 8002380:	d906      	bls.n	8002390 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2221      	movs	r2, #33	; 0x21
 8002386:	2104      	movs	r1, #4
 8002388:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800238a:	183b      	adds	r3, r7, r0
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2240      	movs	r2, #64	; 0x40
 8002398:	4013      	ands	r3, r2
 800239a:	d104      	bne.n	80023a6 <RTC_EnterInitMode+0x7a>
 800239c:	230f      	movs	r3, #15
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d1df      	bne.n	8002366 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80023a6:	230f      	movs	r3, #15
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	781b      	ldrb	r3, [r3, #0]
}
 80023ac:	0018      	movs	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b004      	add	sp, #16
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023bc:	240f      	movs	r4, #15
 80023be:	193b      	adds	r3, r7, r4
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	438a      	bics	r2, r1
 80023d2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2220      	movs	r2, #32
 80023dc:	4013      	ands	r3, r2
 80023de:	d10c      	bne.n	80023fa <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	0018      	movs	r0, r3
 80023e4:	f7ff ff7a 	bl	80022dc <HAL_RTC_WaitForSynchro>
 80023e8:	1e03      	subs	r3, r0, #0
 80023ea:	d006      	beq.n	80023fa <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2221      	movs	r2, #33	; 0x21
 80023f0:	2104      	movs	r1, #4
 80023f2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80023f4:	193b      	adds	r3, r7, r4
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80023fa:	230f      	movs	r3, #15
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	781b      	ldrb	r3, [r3, #0]
}
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	b005      	add	sp, #20
 8002406:	bd90      	pop	{r4, r7, pc}

08002408 <memset>:
 8002408:	0003      	movs	r3, r0
 800240a:	1882      	adds	r2, r0, r2
 800240c:	4293      	cmp	r3, r2
 800240e:	d100      	bne.n	8002412 <memset+0xa>
 8002410:	4770      	bx	lr
 8002412:	7019      	strb	r1, [r3, #0]
 8002414:	3301      	adds	r3, #1
 8002416:	e7f9      	b.n	800240c <memset+0x4>

08002418 <__libc_init_array>:
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	2600      	movs	r6, #0
 800241c:	4c0c      	ldr	r4, [pc, #48]	; (8002450 <__libc_init_array+0x38>)
 800241e:	4d0d      	ldr	r5, [pc, #52]	; (8002454 <__libc_init_array+0x3c>)
 8002420:	1b64      	subs	r4, r4, r5
 8002422:	10a4      	asrs	r4, r4, #2
 8002424:	42a6      	cmp	r6, r4
 8002426:	d109      	bne.n	800243c <__libc_init_array+0x24>
 8002428:	2600      	movs	r6, #0
 800242a:	f000 f819 	bl	8002460 <_init>
 800242e:	4c0a      	ldr	r4, [pc, #40]	; (8002458 <__libc_init_array+0x40>)
 8002430:	4d0a      	ldr	r5, [pc, #40]	; (800245c <__libc_init_array+0x44>)
 8002432:	1b64      	subs	r4, r4, r5
 8002434:	10a4      	asrs	r4, r4, #2
 8002436:	42a6      	cmp	r6, r4
 8002438:	d105      	bne.n	8002446 <__libc_init_array+0x2e>
 800243a:	bd70      	pop	{r4, r5, r6, pc}
 800243c:	00b3      	lsls	r3, r6, #2
 800243e:	58eb      	ldr	r3, [r5, r3]
 8002440:	4798      	blx	r3
 8002442:	3601      	adds	r6, #1
 8002444:	e7ee      	b.n	8002424 <__libc_init_array+0xc>
 8002446:	00b3      	lsls	r3, r6, #2
 8002448:	58eb      	ldr	r3, [r5, r3]
 800244a:	4798      	blx	r3
 800244c:	3601      	adds	r6, #1
 800244e:	e7f2      	b.n	8002436 <__libc_init_array+0x1e>
 8002450:	080024a8 	.word	0x080024a8
 8002454:	080024a8 	.word	0x080024a8
 8002458:	080024ac 	.word	0x080024ac
 800245c:	080024a8 	.word	0x080024a8

08002460 <_init>:
 8002460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002466:	bc08      	pop	{r3}
 8002468:	469e      	mov	lr, r3
 800246a:	4770      	bx	lr

0800246c <_fini>:
 800246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002472:	bc08      	pop	{r3}
 8002474:	469e      	mov	lr, r3
 8002476:	4770      	bx	lr
